import { Component, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';
import { NavController, LoadingController, AlertController, Platform, } from '@ionic/angular';
import { CapacitorSQLite, SQLiteDBConnection } from '@capacitor-community/sqlite';
import { Storage } from '@ionic/storage-angular';
import { DB_Type_ID, Helpers, Op_Type, Op_Type_ID, SyncQuery, User_Action_Request } from '../../providers/helpers/helpers';
import { NgZone } from '@angular/core';
import { Subscription } from 'rxjs';

@Component({
   selector: 'page-show-timeline',
   inputs: ['own_words'],
   templateUrl: 'show-timeline.html',
   styleUrl: 'show-timeline.scss'
})

export class ShowTimelinePage {
   public pageName: string = "Timeline";

   //@ViewChild(Content) content: Content;
   list_own_words: any;
   list_own_word_infos: any;
   timeline: any;
   progressLoader: any;
   //BOOLEANS
   is_event_edit: any;
   display_savedwords: any;
   //STRING ARRAYS:
   input_saved_numbers: any;
   input_saved_words: any;
   input_saved_infos: any;
   //INTEGERS:
   inputOwnWordIndex: any;
   number: any;
   total: any;
   rb_number: any;
   //STRINGS:
   out: any;
   begnum: any;
   midnum: any;
   endnum: any;
   which_events: any;
   id: any;
   ign_lets: any;
   dbl_lets: any;
   password: any;
   wriwor: any;
   year: any;
   date: any;
   edit_date_number: any;
   display_date: any;
   date_number_string: any;
   text: any;
   type_clause: any;
   saved_words: any;
   table: any;
   lfq_table: any;
   sql: any;
   database_string: any;
   //EDIT TEXTS ARRAY:
   input_words: any;
   //RADIO GROUPS ARRAY:
   radio_groups: any;
   months_complete: any;
   public database_misc: SQLiteDBConnection | null = null;
   find_word: any;
   rb_index: any;
   isInsertUserHistorical: Boolean = false;
   entryNumberPersonal: number = 0;
   background_color: any;
   button_color: string = "";
   button_gradient: string = "";
   private onPauseSubscription: Subscription;

   @ViewChild('timelineResultsLeft') timelineResultsLeft: ElementRef | null = null;
   @ViewChild('timelineResultsRight') timelineResultsRight: ElementRef | null = null;
   @ViewChild('showTimelineResults') showTimelineResults: ElementRef | null = null;



   constructor(public navCtrl: NavController, private platform: Platform, public storage: Storage, public progress: LoadingController, private alertCtrl: AlertController, public helpers: Helpers, public ngZone: NgZone, private cdr: ChangeDetectorRef) {
      console.log("Show Timeline constructor called");
      this.onPauseSubscription = this.platform.pause.subscribe(() => {
         this.saveStorage();
      });
   }

   ngOnDestroy() {
      console.log("ngOnDestroy called");
      this.saveStorage();
      this.onPauseSubscription.unsubscribe();
   }

   async ngOnInit() {
      this.timeline = {};
      var getOld: any = {};
      Helpers.currentPageName = this.pageName;
      await this.storage.create();
      this.timeline.getOld = getOld;
      this.timeline.isStartGetEvents = true;
      this.timeline.peglist = [];
      this.timeline.selectedGotToCombo = null;
      this.timeline.isEditWordsAgain = false;
      this.timeline.isCombineYearDateAgain = false;
      this.timeline.canSaveMajorWords = true;
      this.timeline.selectedActionShared = "YEAR_EVENTS";
      this.timeline.selectedActionUsers = "YEAR_EVENTS";
      this.timeline.isShowTimelineResults = false;
      this.list_own_words = [];
      this.list_own_word_infos = [];
      this.inputOwnWordIndex = 0;
      this.timeline.user = Helpers.User;
      this.timeline.password = "";
      this.timeline.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      this.timeline.days = [];
      this.timeline.isCombineYearDate = false;
      this.timeline.isEditShow = false;
      this.timeline.isShared = true;
      this.timeline.isSaveToUserHistorical = false;
      this.timeline.years = [];
      this.timeline.yearsUserHistorical = [];
      this.timeline.yearsUserPersonal = [];
      this.timeline.completed = [];
      this.timeline.major_counts = [1, 12, 24, 36, 48, 60, 72, 84, "ALL"];
      this.timeline.major_counts_again = [1, 6, 12, 18, 24, 30, 36, 84, "ALL"];
      this.timeline.filterText = "";
      var combo3 = ["3"];
      var combo4 = ["4", "2-2"];
      var combo5 = ["5", "3-2", "2-3"];
      var combo6 = ["6", "4-2", "3-3", "2-4", "2-2-2"];
      var combo7 = ["7", "5-2", "2-5", "4-3", "3-4", "3-2-2", "2-3-2", "2-2-3"];
      var combo8 = ["8", "6-2", "2-6", "5-3", "3-5", "4-4", "4-2-2", "2-4-2", "2-2-4", "2-3-3", "3-2-3", "3-3-2", "2-2-2-2"];
      var combo9 = ["9","4-5","5-4","6-3","7-2","2-7","3-6","5-2-2","2-2-5","2-3-4","2-4-3","2-5-2","3-2-4","3-3-3","3-4-2","4-2-3","4-3-2","2-2-2-3","2-2-3-2","2-3-2-2","3-2-2-2"];
      var combo10 = ["10","4-6","5-5","6-4","7-3","8-2","2-8","3-7","5-2-3","5-3-2","6-2-2","2-2-6","2-3-5","2-4-4","2-5-3","2-6-2","3-2-5","3-3-4","3-4-3","3-5-2","4-2-4","4-3-3","4-4-2","2-2-2-4","2-2-3-3","2-2-4-2","2-3-2-3","2-3-3-2","2-4-2-2","3-2-2-3","3-2-3-2","3-3-2-2","4-2-2-2","2-2-2-2-2"];
      var combo11 = ["11","4-7","5-6","6-5","7-4","8-3","9-2","2-9","3-8","4-5-2","5-2-4","5-3-3","5-4-2","6-2-3","6-3-2","7-2-2","2-2-7","2-3-6","2-4-5","2-5-4","2-6-3","2-7-2","3-2-6","3-3-5","3-4-4","3-5-3","3-6-2","4-2-5","4-3-4","4-4-3","5-2-2-2","2-2-2-5","2-2-3-4","2-2-4-3","2-2-5-2","2-3-2-4","2-3-3-3","2-3-4-2","2-4-2-3","2-4-3-2","2-5-2-2","3-2-2-4","3-2-3-3","3-2-4-2","3-3-2-3","3-3-3-2","3-4-2-2","4-2-2-3","4-2-3-2","4-3-2-2","2-2-2-2-3","2-2-2-3-2","2-2-3-2-2","2-3-2-2-2","3-2-2-2-2"];
      var combo12 = ["12","4-8","5-7","6-6","7-5","8-4","9-3","10-2","2-10","3-9","4-5-3","4-6-2","5-2-5","5-3-4","5-4-3","5-5-2","6-2-4","6-3-3","6-4-2","7-2-3","7-3-2","8-2-2","2-2-8","2-3-7","2-4-6","2-5-5","2-6-4","2-7-3","2-8-2","3-2-7","3-3-6","3-4-5","3-5-4","3-6-3","3-7-2","4-2-6","4-3-5","4-4-4","5-2-2-3","5-2-3-2","5-3-2-2","6-2-2-2","2-2-2-6","2-2-3-5","2-2-4-4","2-2-5-3","2-2-6-2","2-3-2-5","2-3-3-4","2-3-4-3","2-3-5-2","2-4-2-4","2-4-3-3","2-4-4-2","2-5-2-3","2-5-3-2","2-6-2-2","3-2-2-5","3-2-3-4","3-2-4-3","3-2-5-2","3-3-2-4","3-3-3-3","3-3-4-2","3-4-2-3","3-4-3-2","3-5-2-2","4-2-2-4","4-2-3-3","4-2-4-2","4-3-2-3","4-3-3-2","4-4-2-2","2-2-2-2-4","2-2-2-3-3","2-2-2-4-2","2-2-3-2-3","2-2-3-3-2","2-2-4-2-2","2-3-2-2-3","2-3-2-3-2","2-3-3-2-2","2-4-2-2-2","3-2-2-2-3","3-2-2-3-2","3-2-3-2-2","3-3-2-2-2","4-2-2-2-2","2-2-2-2-2-2"];
      var combo13 = ["13","4-9","5-8","6-7","7-6","8-5","9-4","10-3","11-2","2-11","3-10","4-4-5","4-5-4","4-6-3","4-7-2","5-2-6","5-3-5","5-4-4","5-5-3","5-6-2","6-2-5","6-3-4","6-4-3","6-5-2","7-2-4","7-3-3","7-4-2","8-2-3","8-3-2","9-2-2","2-2-9","2-3-8","2-4-7","2-5-6","2-6-5","2-7-4","2-8-3","2-9-2","3-2-8","3-3-7","3-4-6","3-5-5","3-6-4","3-7-3","3-8-2","4-2-7","4-3-6","4-5-2-2","5-2-2-4","5-2-3-3","5-2-4-2","5-3-2-3","5-3-3-2","5-4-2-2","6-2-2-3","6-2-3-2","6-3-2-2","7-2-2-2","2-2-2-7","2-2-3-6","2-2-4-5","2-2-5-4","2-2-6-3","2-2-7-2","2-3-2-6","2-3-3-5","2-3-4-4","2-3-5-3","2-3-6-2","2-4-2-5","2-4-3-4","2-4-4-3","2-4-5-2","2-5-2-4","2-5-3-3","2-5-4-2","2-6-2-3","2-6-3-2","2-7-2-2","3-2-2-6","3-2-3-5","3-2-4-4","3-2-5-3","3-2-6-2","3-3-2-5","3-3-3-4","3-3-4-3","3-3-5-2","3-4-2-4","3-4-3-3","3-4-4-2","3-5-2-3","3-5-3-2","3-6-2-2","4-2-2-5","4-2-3-4","4-2-4-3","4-2-5-2","4-3-2-4","4-3-3-3","4-3-4-2","4-4-2-3","4-4-3-2","5-2-2-2-2","2-2-2-2-5","2-2-2-3-4","2-2-2-4-3","2-2-2-5-2","2-2-3-2-4","2-2-3-3-3","2-2-3-4-2","2-2-4-2-3","2-2-4-3-2","2-2-5-2-2","2-3-2-2-4","2-3-2-3-3","2-3-2-4-2","2-3-3-2-3","2-3-3-3-2","2-3-4-2-2","2-4-2-2-3","2-4-2-3-2","2-4-3-2-2","2-5-2-2-2","3-2-2-2-4","3-2-2-3-3","3-2-2-4-2","3-2-3-2-3","3-2-3-3-2","3-2-4-2-2","3-3-2-2-3","3-3-2-3-2","3-3-3-2-2","3-4-2-2-2","4-2-2-2-3","4-2-2-3-2","4-2-3-2-2","4-3-2-2-2","2-2-2-2-2-3","2-2-2-2-3-2","2-2-2-3-2-2","2-2-3-2-2-2","2-3-2-2-2-2","3-2-2-2-2-2"];
      var combo14 = ["14","4-10","5-9","6-8","7-7","8-6","9-5","10-4","11-3","12-2","2-12","3-11","4-4-6","4-5-5","4-6-4","4-7-3","4-8-2","5-2-7","5-3-6","5-4-5","5-5-4","5-6-3","5-7-2","6-2-6","6-3-5","6-4-4","6-5-3","6-6-2","7-2-5","7-3-4","7-4-3","7-5-2","8-2-4","8-3-3","8-4-2","9-2-3","9-3-2","10-2-2","2-2-10","2-3-9","2-4-8","2-5-7","2-6-6","2-7-5","2-8-4","2-9-3","2-10-2","3-2-9","3-3-8","3-4-7","3-5-6","3-6-5","3-7-4","3-8-3","3-9-2","4-2-8","4-3-7","4-5-2-3","4-5-3-2","4-6-2-2","5-2-2-5","5-2-3-4","5-2-4-3","5-2-5-2","5-3-2-4","5-3-3-3","5-3-4-2","5-4-2-3","5-4-3-2","5-5-2-2","6-2-2-4","6-2-3-3","6-2-4-2","6-3-2-3","6-3-3-2","6-4-2-2","7-2-2-3","7-2-3-2","7-3-2-2","8-2-2-2","2-2-2-8","2-2-3-7","2-2-4-6","2-2-5-5","2-2-6-4","2-2-7-3","2-2-8-2","2-3-2-7","2-3-3-6","2-3-4-5","2-3-5-4","2-3-6-3","2-3-7-2","2-4-2-6","2-4-3-5","2-4-4-4","2-4-5-3","2-4-6-2","2-5-2-5","2-5-3-4","2-5-4-3","2-5-5-2","2-6-2-4","2-6-3-3","2-6-4-2","2-7-2-3","2-7-3-2","2-8-2-2","3-2-2-7","3-2-3-6","3-2-4-5","3-2-5-4","3-2-6-3","3-2-7-2","3-3-2-6","3-3-3-5","3-3-4-4","3-3-5-3","3-3-6-2","3-4-2-5","3-4-3-4","3-4-4-3","3-4-5-2","3-5-2-4","3-5-3-3","3-5-4-2","3-6-2-3","3-6-3-2","3-7-2-2","4-2-2-6","4-2-3-5","4-2-4-4","4-2-5-3","4-2-6-2","4-3-2-5","4-3-3-4","4-3-4-3","4-3-5-2","4-4-2-4","4-4-3-3","4-4-4-2","5-2-2-2-3","5-2-2-3-2","5-2-3-2-2","5-3-2-2-2","6-2-2-2-2","2-2-2-2-6","2-2-2-3-5","2-2-2-4-4","2-2-2-5-3","2-2-2-6-2","2-2-3-2-5","2-2-3-3-4","2-2-3-4-3","2-2-3-5-2","2-2-4-2-4","2-2-4-3-3","2-2-4-4-2","2-2-5-2-3","2-2-5-3-2","2-2-6-2-2","2-3-2-2-5","2-3-2-3-4","2-3-2-4-3","2-3-2-5-2","2-3-3-2-4","2-3-3-3-3","2-3-3-4-2","2-3-4-2-3","2-3-4-3-2","2-3-5-2-2","2-4-2-2-4","2-4-2-3-3","2-4-2-4-2","2-4-3-2-3","2-4-3-3-2","2-4-4-2-2","2-5-2-2-3","2-5-2-3-2","2-5-3-2-2","2-6-2-2-2","3-2-2-2-5","3-2-2-3-4","3-2-2-4-3","3-2-2-5-2","3-2-3-2-4","3-2-3-3-3","3-2-3-4-2","3-2-4-2-3","3-2-4-3-2","3-2-5-2-2","3-3-2-2-4","3-3-2-3-3","3-3-2-4-2","3-3-3-2-3","3-3-3-3-2","3-3-4-2-2","3-4-2-2-3","3-4-2-3-2","3-4-3-2-2","3-5-2-2-2","4-2-2-2-4","4-2-2-3-3","4-2-2-4-2","4-2-3-2-3","4-2-3-3-2","4-2-4-2-2","4-3-2-2-3","4-3-2-3-2","4-3-3-2-2","4-4-2-2-2","2-2-2-2-2-4","2-2-2-2-3-3","2-2-2-2-4-2","2-2-2-3-2-3","2-2-2-3-3-2","2-2-2-4-2-2","2-2-3-2-2-3","2-2-3-2-3-2","2-2-3-3-2-2","2-2-4-2-2-2","2-3-2-2-2-3","2-3-2-2-3-2","2-3-2-3-2-2","2-3-3-2-2-2","2-4-2-2-2-2","3-2-2-2-2-3","3-2-2-2-3-2","3-2-2-3-2-2","3-2-3-2-2-2","3-3-2-2-2-2","4-2-2-2-2-2","2-2-2-2-2-2-2"];
      var combo15 = ["15","4-11","5-10","6-9","7-8","8-7","9-6","10-5","11-4","12-3","13-2","2-13","3-12","4-4-7","4-5-6","4-6-5","4-7-4","4-8-3","4-9-2","5-2-8","5-3-7","5-4-6","5-5-5","5-6-4","5-7-3","5-8-2","6-2-7","6-3-6","6-4-5","6-5-4","6-6-3","6-7-2","7-2-6","7-3-5","7-4-4","7-5-3","7-6-2","8-2-5","8-3-4","8-4-3","8-5-2","9-2-4","9-3-3","9-4-2","10-2-3","10-3-2","11-2-2","2-2-11","2-3-10","2-4-9","2-5-8","2-6-7","2-7-6","2-8-5","2-9-4","2-10-3","2-11-2","3-2-10","3-3-9","3-4-8","3-5-7","3-6-6","3-7-5","3-8-4","3-9-3","3-10-2","4-2-9","4-3-8","4-4-5-2","4-5-2-4","4-5-3-3","4-5-4-2","4-6-2-3","4-6-3-2","4-7-2-2","5-2-2-6","5-2-3-5","5-2-4-4","5-2-5-3","5-2-6-2","5-3-2-5","5-3-3-4","5-3-4-3","5-3-5-2","5-4-2-4","5-4-3-3","5-4-4-2","5-5-2-3","5-5-3-2","5-6-2-2","6-2-2-5","6-2-3-4","6-2-4-3","6-2-5-2","6-3-2-4","6-3-3-3","6-3-4-2","6-4-2-3","6-4-3-2","6-5-2-2","7-2-2-4","7-2-3-3","7-2-4-2","7-3-2-3","7-3-3-2","7-4-2-2","8-2-2-3","8-2-3-2","8-3-2-2","9-2-2-2","2-2-2-9","2-2-3-8","2-2-4-7","2-2-5-6","2-2-6-5","2-2-7-4","2-2-8-3","2-2-9-2","2-3-2-8","2-3-3-7","2-3-4-6","2-3-5-5","2-3-6-4","2-3-7-3","2-3-8-2","2-4-2-7","2-4-3-6","2-4-4-5","2-4-5-4","2-4-6-3","2-4-7-2","2-5-2-6","2-5-3-5","2-5-4-4","2-5-5-3","2-5-6-2","2-6-2-5","2-6-3-4","2-6-4-3","2-6-5-2","2-7-2-4","2-7-3-3","2-7-4-2","2-8-2-3","2-8-3-2","2-9-2-2","3-2-2-8","3-2-3-7","3-2-4-6","3-2-5-5","3-2-6-4","3-2-7-3","3-2-8-2","3-3-2-7","3-3-3-6","3-3-4-5","3-3-5-4","3-3-6-3","3-3-7-2","3-4-2-6","3-4-3-5","3-4-4-4","3-4-5-3","3-4-6-2","3-5-2-5","3-5-3-4","3-5-4-3","3-5-5-2","3-6-2-4","3-6-3-3","3-6-4-2","3-7-2-3","3-7-3-2","3-8-2-2","4-2-2-7","4-2-3-6","4-2-4-5","4-2-5-4","4-2-6-3","4-2-7-2","4-3-2-6","4-3-3-5","4-3-4-4","4-3-5-3","4-3-6-2","4-4-2-5","4-4-3-4","4-4-4-3","4-5-2-2-2","5-2-2-2-4","5-2-2-3-3","5-2-2-4-2","5-2-3-2-3","5-2-3-3-2","5-2-4-2-2","5-3-2-2-3","5-3-2-3-2","5-3-3-2-2","5-4-2-2-2","6-2-2-2-3","6-2-2-3-2","6-2-3-2-2","6-3-2-2-2","7-2-2-2-2","2-2-2-2-7","2-2-2-3-6","2-2-2-4-5","2-2-2-5-4","2-2-2-6-3","2-2-2-7-2","2-2-3-2-6","2-2-3-3-5","2-2-3-4-4","2-2-3-5-3","2-2-3-6-2","2-2-4-2-5","2-2-4-3-4","2-2-4-4-3","2-2-4-5-2","2-2-5-2-4","2-2-5-3-3","2-2-5-4-2","2-2-6-2-3","2-2-6-3-2","2-2-7-2-2","2-3-2-2-6","2-3-2-3-5","2-3-2-4-4","2-3-2-5-3","2-3-2-6-2","2-3-3-2-5","2-3-3-3-4","2-3-3-4-3","2-3-3-5-2","2-3-4-2-4","2-3-4-3-3","2-3-4-4-2","2-3-5-2-3","2-3-5-3-2","2-3-6-2-2","2-4-2-2-5","2-4-2-3-4","2-4-2-4-3","2-4-2-5-2","2-4-3-2-4","2-4-3-3-3","2-4-3-4-2","2-4-4-2-3","2-4-4-3-2","2-4-5-2-2","2-5-2-2-4","2-5-2-3-3","2-5-2-4-2","2-5-3-2-3","2-5-3-3-2","2-5-4-2-2","2-6-2-2-3","2-6-2-3-2","2-6-3-2-2","2-7-2-2-2","3-2-2-2-6","3-2-2-3-5","3-2-2-4-4","3-2-2-5-3","3-2-2-6-2","3-2-3-2-5","3-2-3-3-4","3-2-3-4-3","3-2-3-5-2","3-2-4-2-4","3-2-4-3-3","3-2-4-4-2","3-2-5-2-3","3-2-5-3-2","3-2-6-2-2","3-3-2-2-5","3-3-2-3-4","3-3-2-4-3","3-3-2-5-2","3-3-3-2-4","3-3-3-3-3","3-3-3-4-2","3-3-4-2-3","3-3-4-3-2","3-3-5-2-2","3-4-2-2-4","3-4-2-3-3","3-4-2-4-2","3-4-3-2-3","3-4-3-3-2","3-4-4-2-2","3-5-2-2-3","3-5-2-3-2","3-5-3-2-2","3-6-2-2-2","4-2-2-2-5","4-2-2-3-4","4-2-2-4-3","4-2-2-5-2","4-2-3-2-4","4-2-3-3-3","4-2-3-4-2","4-2-4-2-3","4-2-4-3-2","4-2-5-2-2","4-3-2-2-4","4-3-2-3-3","4-3-2-4-2","4-3-3-2-3","4-3-3-3-2","4-3-4-2-2","4-4-2-2-3","4-4-2-3-2","4-4-3-2-2","5-2-2-2-2-2","2-2-2-2-2-5","2-2-2-2-3-4","2-2-2-2-4-3","2-2-2-2-5-2","2-2-2-3-2-4","2-2-2-3-3-3","2-2-2-3-4-2","2-2-2-4-2-3","2-2-2-4-3-2","2-2-2-5-2-2","2-2-3-2-2-4","2-2-3-2-3-3","2-2-3-2-4-2","2-2-3-3-2-3","2-2-3-3-3-2","2-2-3-4-2-2","2-2-4-2-2-3","2-2-4-2-3-2","2-2-4-3-2-2","2-2-5-2-2-2","2-3-2-2-2-4","2-3-2-2-3-3","2-3-2-2-4-2","2-3-2-3-2-3","2-3-2-3-3-2","2-3-2-4-2-2","2-3-3-2-2-3","2-3-3-2-3-2","2-3-3-3-2-2","2-3-4-2-2-2","2-4-2-2-2-3","2-4-2-2-3-2","2-4-2-3-2-2","2-4-3-2-2-2","2-5-2-2-2-2","3-2-2-2-2-4","3-2-2-2-3-3","3-2-2-2-4-2","3-2-2-3-2-3","3-2-2-3-3-2","3-2-2-4-2-2","3-2-3-2-2-3","3-2-3-2-3-2","3-2-3-3-2-2","3-2-4-2-2-2","3-3-2-2-2-3","3-3-2-2-3-2","3-3-2-3-2-2","3-3-3-2-2-2","3-4-2-2-2-2","4-2-2-2-2-3","4-2-2-2-3-2","4-2-2-3-2-2","4-2-3-2-2-2","4-3-2-2-2-2","2-2-2-2-2-2-3","2-2-2-2-2-3-2","2-2-2-2-3-2-2","2-2-2-3-2-2-2","2-2-3-2-2-2-2","2-3-2-2-2-2-2","3-2-2-2-2-2-2"];
      var combo16 = ["16","4-12","5-11","6-10","7-9","8-8","9-7","10-6","11-5","12-4","13-3","14-2","2-14","3-13","4-4-8","4-5-7","4-6-6","4-7-5","4-8-4","4-9-3","4-10-2","5-2-9","5-3-8","5-4-7","5-5-6","5-6-5","5-7-4","5-8-3","5-9-2","6-2-8","6-3-7","6-4-6","6-5-5","6-6-4","6-7-3","6-8-2","7-2-7","7-3-6","7-4-5","7-5-4","7-6-3","7-7-2","8-2-6","8-3-5","8-4-4","8-5-3","8-6-2","9-2-5","9-3-4","9-4-3","9-5-2","10-2-4","10-3-3","10-4-2","11-2-3","11-3-2","12-2-2","2-2-12","2-3-11","2-4-10","2-5-9","2-6-8","2-7-7","2-8-6","2-9-5","2-10-4","2-11-3","2-12-2","3-2-11","3-3-10","3-4-9","3-5-8","3-6-7","3-7-6","3-8-5","3-9-4","3-10-3","3-11-2","4-2-10","4-3-9","4-4-5-3","4-4-6-2","4-5-2-5","4-5-3-4","4-5-4-3","4-5-5-2","4-6-2-4","4-6-3-3","4-6-4-2","4-7-2-3","4-7-3-2","4-8-2-2","5-2-2-7","5-2-3-6","5-2-4-5","5-2-5-4","5-2-6-3","5-2-7-2","5-3-2-6","5-3-3-5","5-3-4-4","5-3-5-3","5-3-6-2","5-4-2-5","5-4-3-4","5-4-4-3","5-4-5-2","5-5-2-4","5-5-3-3","5-5-4-2","5-6-2-3","5-6-3-2","5-7-2-2","6-2-2-6","6-2-3-5","6-2-4-4","6-2-5-3","6-2-6-2","6-3-2-5","6-3-3-4","6-3-4-3","6-3-5-2","6-4-2-4","6-4-3-3","6-4-4-2","6-5-2-3","6-5-3-2","6-6-2-2","7-2-2-5","7-2-3-4","7-2-4-3","7-2-5-2","7-3-2-4","7-3-3-3","7-3-4-2","7-4-2-3","7-4-3-2","7-5-2-2","8-2-2-4","8-2-3-3","8-2-4-2","8-3-2-3","8-3-3-2","8-4-2-2","9-2-2-3","9-2-3-2","9-3-2-2","10-2-2-2","2-2-2-10","2-2-3-9","2-2-4-8","2-2-5-7","2-2-6-6","2-2-7-5","2-2-8-4","2-2-9-3","2-2-10-2","2-3-2-9","2-3-3-8","2-3-4-7","2-3-5-6","2-3-6-5","2-3-7-4","2-3-8-3","2-3-9-2","2-4-2-8","2-4-3-7","2-4-4-6","2-4-5-5","2-4-6-4","2-4-7-3","2-4-8-2","2-5-2-7","2-5-3-6","2-5-4-5","2-5-5-4","2-5-6-3","2-5-7-2","2-6-2-6","2-6-3-5","2-6-4-4","2-6-5-3","2-6-6-2","2-7-2-5","2-7-3-4","2-7-4-3","2-7-5-2","2-8-2-4","2-8-3-3","2-8-4-2","2-9-2-3","2-9-3-2","2-10-2-2","3-2-2-9","3-2-3-8","3-2-4-7","3-2-5-6","3-2-6-5","3-2-7-4","3-2-8-3","3-2-9-2","3-3-2-8","3-3-3-7","3-3-4-6","3-3-5-5","3-3-6-4","3-3-7-3","3-3-8-2","3-4-2-7","3-4-3-6","3-4-4-5","3-4-5-4","3-4-6-3","3-4-7-2","3-5-2-6","3-5-3-5","3-5-4-4","3-5-5-3","3-5-6-2","3-6-2-5","3-6-3-4","3-6-4-3","3-6-5-2","3-7-2-4","3-7-3-3","3-7-4-2","3-8-2-3","3-8-3-2","3-9-2-2","4-2-2-8","4-2-3-7","4-2-4-6","4-2-5-5","4-2-6-4","4-2-7-3","4-2-8-2","4-3-2-7","4-3-3-6","4-3-4-5","4-3-5-4","4-3-6-3","4-3-7-2","4-4-2-6","4-4-3-5","4-4-4-4","4-5-2-2-3","4-5-2-3-2","4-5-3-2-2","4-6-2-2-2","5-2-2-2-5","5-2-2-3-4","5-2-2-4-3","5-2-2-5-2","5-2-3-2-4","5-2-3-3-3","5-2-3-4-2","5-2-4-2-3","5-2-4-3-2","5-2-5-2-2","5-3-2-2-4","5-3-2-3-3","5-3-2-4-2","5-3-3-2-3","5-3-3-3-2","5-3-4-2-2","5-4-2-2-3","5-4-2-3-2","5-4-3-2-2","5-5-2-2-2","6-2-2-2-4","6-2-2-3-3","6-2-2-4-2","6-2-3-2-3","6-2-3-3-2","6-2-4-2-2","6-3-2-2-3","6-3-2-3-2","6-3-3-2-2","6-4-2-2-2","7-2-2-2-3","7-2-2-3-2","7-2-3-2-2","7-3-2-2-2","8-2-2-2-2","2-2-2-2-8","2-2-2-3-7","2-2-2-4-6","2-2-2-5-5","2-2-2-6-4","2-2-2-7-3","2-2-2-8-2","2-2-3-2-7","2-2-3-3-6","2-2-3-4-5","2-2-3-5-4","2-2-3-6-3","2-2-3-7-2","2-2-4-2-6","2-2-4-3-5","2-2-4-4-4","2-2-4-5-3","2-2-4-6-2","2-2-5-2-5","2-2-5-3-4","2-2-5-4-3","2-2-5-5-2","2-2-6-2-4","2-2-6-3-3","2-2-6-4-2","2-2-7-2-3","2-2-7-3-2","2-2-8-2-2","2-3-2-2-7","2-3-2-3-6","2-3-2-4-5","2-3-2-5-4","2-3-2-6-3","2-3-2-7-2","2-3-3-2-6","2-3-3-3-5","2-3-3-4-4","2-3-3-5-3","2-3-3-6-2","2-3-4-2-5","2-3-4-3-4","2-3-4-4-3","2-3-4-5-2","2-3-5-2-4","2-3-5-3-3","2-3-5-4-2","2-3-6-2-3","2-3-6-3-2","2-3-7-2-2","2-4-2-2-6","2-4-2-3-5","2-4-2-4-4","2-4-2-5-3","2-4-2-6-2","2-4-3-2-5","2-4-3-3-4","2-4-3-4-3","2-4-3-5-2","2-4-4-2-4","2-4-4-3-3","2-4-4-4-2","2-4-5-2-3","2-4-5-3-2","2-4-6-2-2","2-5-2-2-5","2-5-2-3-4","2-5-2-4-3","2-5-2-5-2","2-5-3-2-4","2-5-3-3-3","2-5-3-4-2","2-5-4-2-3","2-5-4-3-2","2-5-5-2-2","2-6-2-2-4","2-6-2-3-3","2-6-2-4-2","2-6-3-2-3","2-6-3-3-2","2-6-4-2-2","2-7-2-2-3","2-7-2-3-2","2-7-3-2-2","2-8-2-2-2","3-2-2-2-7","3-2-2-3-6","3-2-2-4-5","3-2-2-5-4","3-2-2-6-3","3-2-2-7-2","3-2-3-2-6","3-2-3-3-5","3-2-3-4-4","3-2-3-5-3","3-2-3-6-2","3-2-4-2-5","3-2-4-3-4","3-2-4-4-3","3-2-4-5-2","3-2-5-2-4","3-2-5-3-3","3-2-5-4-2","3-2-6-2-3","3-2-6-3-2","3-2-7-2-2","3-3-2-2-6","3-3-2-3-5","3-3-2-4-4","3-3-2-5-3","3-3-2-6-2","3-3-3-2-5","3-3-3-3-4","3-3-3-4-3","3-3-3-5-2","3-3-4-2-4","3-3-4-3-3","3-3-4-4-2","3-3-5-2-3","3-3-5-3-2","3-3-6-2-2","3-4-2-2-5","3-4-2-3-4","3-4-2-4-3","3-4-2-5-2","3-4-3-2-4","3-4-3-3-3","3-4-3-4-2","3-4-4-2-3","3-4-4-3-2","3-4-5-2-2","3-5-2-2-4","3-5-2-3-3","3-5-2-4-2","3-5-3-2-3","3-5-3-3-2","3-5-4-2-2","3-6-2-2-3","3-6-2-3-2","3-6-3-2-2","3-7-2-2-2","4-2-2-2-6","4-2-2-3-5","4-2-2-4-4","4-2-2-5-3","4-2-2-6-2","4-2-3-2-5","4-2-3-3-4","4-2-3-4-3","4-2-3-5-2","4-2-4-2-4","4-2-4-3-3","4-2-4-4-2","4-2-5-2-3","4-2-5-3-2","4-2-6-2-2","4-3-2-2-5","4-3-2-3-4","4-3-2-4-3","4-3-2-5-2","4-3-3-2-4","4-3-3-3-3","4-3-3-4-2","4-3-4-2-3","4-3-4-3-2","4-3-5-2-2","4-4-2-2-4","4-4-2-3-3","4-4-2-4-2","4-4-3-2-3","4-4-3-3-2","4-4-4-2-2","5-2-2-2-2-3","5-2-2-2-3-2","5-2-2-3-2-2","5-2-3-2-2-2","5-3-2-2-2-2","6-2-2-2-2-2","2-2-2-2-2-6","2-2-2-2-3-5","2-2-2-2-4-4","2-2-2-2-5-3","2-2-2-2-6-2","2-2-2-3-2-5","2-2-2-3-3-4","2-2-2-3-4-3","2-2-2-3-5-2","2-2-2-4-2-4","2-2-2-4-3-3","2-2-2-4-4-2","2-2-2-5-2-3","2-2-2-5-3-2","2-2-2-6-2-2","2-2-3-2-2-5","2-2-3-2-3-4","2-2-3-2-4-3","2-2-3-2-5-2","2-2-3-3-2-4","2-2-3-3-3-3","2-2-3-3-4-2","2-2-3-4-2-3","2-2-3-4-3-2","2-2-3-5-2-2","2-2-4-2-2-4","2-2-4-2-3-3","2-2-4-2-4-2","2-2-4-3-2-3","2-2-4-3-3-2","2-2-4-4-2-2","2-2-5-2-2-3","2-2-5-2-3-2","2-2-5-3-2-2","2-2-6-2-2-2","2-3-2-2-2-5","2-3-2-2-3-4","2-3-2-2-4-3","2-3-2-2-5-2","2-3-2-3-2-4","2-3-2-3-3-3","2-3-2-3-4-2","2-3-2-4-2-3","2-3-2-4-3-2","2-3-2-5-2-2","2-3-3-2-2-4","2-3-3-2-3-3","2-3-3-2-4-2","2-3-3-3-2-3","2-3-3-3-3-2","2-3-3-4-2-2","2-3-4-2-2-3","2-3-4-2-3-2","2-3-4-3-2-2","2-3-5-2-2-2","2-4-2-2-2-4","2-4-2-2-3-3","2-4-2-2-4-2","2-4-2-3-2-3","2-4-2-3-3-2","2-4-2-4-2-2","2-4-3-2-2-3","2-4-3-2-3-2","2-4-3-3-2-2","2-4-4-2-2-2","2-5-2-2-2-3","2-5-2-2-3-2","2-5-2-3-2-2","2-5-3-2-2-2","2-6-2-2-2-2","3-2-2-2-2-5","3-2-2-2-3-4","3-2-2-2-4-3","3-2-2-2-5-2","3-2-2-3-2-4","3-2-2-3-3-3","3-2-2-3-4-2","3-2-2-4-2-3","3-2-2-4-3-2","3-2-2-5-2-2","3-2-3-2-2-4","3-2-3-2-3-3","3-2-3-2-4-2","3-2-3-3-2-3","3-2-3-3-3-2","3-2-3-4-2-2","3-2-4-2-2-3","3-2-4-2-3-2","3-2-4-3-2-2","3-2-5-2-2-2","3-3-2-2-2-4","3-3-2-2-3-3","3-3-2-2-4-2","3-3-2-3-2-3","3-3-2-3-3-2","3-3-2-4-2-2","3-3-3-2-2-3","3-3-3-2-3-2","3-3-3-3-2-2","3-3-4-2-2-2","3-4-2-2-2-3","3-4-2-2-3-2","3-4-2-3-2-2","3-4-3-2-2-2","3-5-2-2-2-2","4-2-2-2-2-4","4-2-2-2-3-3","4-2-2-2-4-2","4-2-2-3-2-3","4-2-2-3-3-2","4-2-2-4-2-2","4-2-3-2-2-3","4-2-3-2-3-2","4-2-3-3-2-2","4-2-4-2-2-2","4-3-2-2-2-3","4-3-2-2-3-2","4-3-2-3-2-2","4-3-3-2-2-2","4-4-2-2-2-2","2-2-2-2-2-2-4","2-2-2-2-2-3-3","2-2-2-2-2-4-2","2-2-2-2-3-2-3","2-2-2-2-3-3-2","2-2-2-2-4-2-2","2-2-2-3-2-2-3","2-2-2-3-2-3-2","2-2-2-3-3-2-2","2-2-2-4-2-2-2","2-2-3-2-2-2-3","2-2-3-2-2-3-2","2-2-3-2-3-2-2","2-2-3-3-2-2-2","2-2-4-2-2-2-2","2-3-2-2-2-2-3","2-3-2-2-2-3-2","2-3-2-2-3-2-2","2-3-2-3-2-2-2","2-3-3-2-2-2-2","2-4-2-2-2-2-2","3-2-2-2-2-2-3","3-2-2-2-2-3-2","3-2-2-2-3-2-2","3-2-2-3-2-2-2","3-2-3-2-2-2-2","3-3-2-2-2-2-2","4-2-2-2-2-2-2","2-2-2-2-2-2-2-2"];
      var combo17 = ["17","4-13","5-12","6-11","7-10","8-9","9-8","10-7","11-6","12-5","13-4","14-3","15-2","2-15","3-14","4-4-9","4-5-8","4-6-7","4-7-6","4-8-5","4-9-4","4-10-3","4-11-2","5-2-10","5-3-9","5-4-8","5-5-7","5-6-6","5-7-5","5-8-4","5-9-3","5-10-2","6-2-9","6-3-8","6-4-7","6-5-6","6-6-5","6-7-4","6-8-3","6-9-2","7-2-8","7-3-7","7-4-6","7-5-5","7-6-4","7-7-3","7-8-2","8-2-7","8-3-6","8-4-5","8-5-4","8-6-3","8-7-2","9-2-6","9-3-5","9-4-4","9-5-3","9-6-2","10-2-5","10-3-4","10-4-3","10-5-2","11-2-4","11-3-3","11-4-2","12-2-3","12-3-2","13-2-2","2-2-13","2-3-12","2-4-11","2-5-10","2-6-9","2-7-8","2-8-7","2-9-6","2-10-5","2-11-4","2-12-3","2-13-2","3-2-12","3-3-11","3-4-10","3-5-9","3-6-8","3-7-7","3-8-6","3-9-5","3-10-4","3-11-3","3-12-2","4-2-11","4-3-10","4-4-4-5","4-4-5-4","4-4-6-3","4-4-7-2","4-5-2-6","4-5-3-5","4-5-4-4","4-5-5-3","4-5-6-2","4-6-2-5","4-6-3-4","4-6-4-3","4-6-5-2","4-7-2-4","4-7-3-3","4-7-4-2","4-8-2-3","4-8-3-2","4-9-2-2","5-2-2-8","5-2-3-7","5-2-4-6","5-2-5-5","5-2-6-4","5-2-7-3","5-2-8-2","5-3-2-7","5-3-3-6","5-3-4-5","5-3-5-4","5-3-6-3","5-3-7-2","5-4-2-6","5-4-3-5","5-4-4-4","5-4-5-3","5-4-6-2","5-5-2-5","5-5-3-4","5-5-4-3","5-5-5-2","5-6-2-4","5-6-3-3","5-6-4-2","5-7-2-3","5-7-3-2","5-8-2-2","6-2-2-7","6-2-3-6","6-2-4-5","6-2-5-4","6-2-6-3","6-2-7-2","6-3-2-6","6-3-3-5","6-3-4-4","6-3-5-3","6-3-6-2","6-4-2-5","6-4-3-4","6-4-4-3","6-4-5-2","6-5-2-4","6-5-3-3","6-5-4-2","6-6-2-3","6-6-3-2","6-7-2-2","7-2-2-6","7-2-3-5","7-2-4-4","7-2-5-3","7-2-6-2","7-3-2-5","7-3-3-4","7-3-4-3","7-3-5-2","7-4-2-4","7-4-3-3","7-4-4-2","7-5-2-3","7-5-3-2","7-6-2-2","8-2-2-5","8-2-3-4","8-2-4-3","8-2-5-2","8-3-2-4","8-3-3-3","8-3-4-2","8-4-2-3","8-4-3-2","8-5-2-2","9-2-2-4","9-2-3-3","9-2-4-2","9-3-2-3","9-3-3-2","9-4-2-2","10-2-2-3","10-2-3-2","10-3-2-2","11-2-2-2","2-2-2-11","2-2-3-10","2-2-4-9","2-2-5-8","2-2-6-7","2-2-7-6","2-2-8-5","2-2-9-4","2-2-10-3","2-2-11-2","2-3-2-10","2-3-3-9","2-3-4-8","2-3-5-7","2-3-6-6","2-3-7-5","2-3-8-4","2-3-9-3","2-3-10-2","2-4-2-9","2-4-3-8","2-4-4-7","2-4-5-6","2-4-6-5","2-4-7-4","2-4-8-3","2-4-9-2","2-5-2-8","2-5-3-7","2-5-4-6","2-5-5-5","2-5-6-4","2-5-7-3","2-5-8-2","2-6-2-7","2-6-3-6","2-6-4-5","2-6-5-4","2-6-6-3","2-6-7-2","2-7-2-6","2-7-3-5","2-7-4-4","2-7-5-3","2-7-6-2","2-8-2-5","2-8-3-4","2-8-4-3","2-8-5-2","2-9-2-4","2-9-3-3","2-9-4-2","2-10-2-3","2-10-3-2","2-11-2-2","3-2-2-10","3-2-3-9","3-2-4-8","3-2-5-7","3-2-6-6","3-2-7-5","3-2-8-4","3-2-9-3","3-2-10-2","3-3-2-9","3-3-3-8","3-3-4-7","3-3-5-6","3-3-6-5","3-3-7-4","3-3-8-3","3-3-9-2","3-4-2-8","3-4-3-7","3-4-4-6","3-4-5-5","3-4-6-4","3-4-7-3","3-4-8-2","3-5-2-7","3-5-3-6","3-5-4-5","3-5-5-4","3-5-6-3","3-5-7-2","3-6-2-6","3-6-3-5","3-6-4-4","3-6-5-3","3-6-6-2","3-7-2-5","3-7-3-4","3-7-4-3","3-7-5-2","3-8-2-4","3-8-3-3","3-8-4-2","3-9-2-3","3-9-3-2","3-10-2-2","4-2-2-9","4-2-3-8","4-2-4-7","4-2-5-6","4-2-6-5","4-2-7-4","4-2-8-3","4-2-9-2","4-3-2-8","4-3-3-7","4-3-4-6","4-3-5-5","4-3-6-4","4-3-7-3","4-3-8-2","4-4-2-7","4-4-3-6","4-4-5-2-2","4-5-2-2-4","4-5-2-3-3","4-5-2-4-2","4-5-3-2-3","4-5-3-3-2","4-5-4-2-2","4-6-2-2-3","4-6-2-3-2","4-6-3-2-2","4-7-2-2-2","5-2-2-2-6","5-2-2-3-5","5-2-2-4-4","5-2-2-5-3","5-2-2-6-2","5-2-3-2-5","5-2-3-3-4","5-2-3-4-3","5-2-3-5-2","5-2-4-2-4","5-2-4-3-3","5-2-4-4-2","5-2-5-2-3","5-2-5-3-2","5-2-6-2-2","5-3-2-2-5","5-3-2-3-4","5-3-2-4-3","5-3-2-5-2","5-3-3-2-4","5-3-3-3-3","5-3-3-4-2","5-3-4-2-3","5-3-4-3-2","5-3-5-2-2","5-4-2-2-4","5-4-2-3-3","5-4-2-4-2","5-4-3-2-3","5-4-3-3-2","5-4-4-2-2","5-5-2-2-3","5-5-2-3-2","5-5-3-2-2","5-6-2-2-2","6-2-2-2-5","6-2-2-3-4","6-2-2-4-3","6-2-2-5-2","6-2-3-2-4","6-2-3-3-3","6-2-3-4-2","6-2-4-2-3","6-2-4-3-2","6-2-5-2-2","6-3-2-2-4","6-3-2-3-3","6-3-2-4-2","6-3-3-2-3","6-3-3-3-2","6-3-4-2-2","6-4-2-2-3","6-4-2-3-2","6-4-3-2-2","6-5-2-2-2","7-2-2-2-4","7-2-2-3-3","7-2-2-4-2","7-2-3-2-3","7-2-3-3-2","7-2-4-2-2","7-3-2-2-3","7-3-2-3-2","7-3-3-2-2","7-4-2-2-2","8-2-2-2-3","8-2-2-3-2","8-2-3-2-2","8-3-2-2-2","9-2-2-2-2","2-2-2-2-9","2-2-2-3-8","2-2-2-4-7","2-2-2-5-6","2-2-2-6-5","2-2-2-7-4","2-2-2-8-3","2-2-2-9-2","2-2-3-2-8","2-2-3-3-7","2-2-3-4-6","2-2-3-5-5","2-2-3-6-4","2-2-3-7-3","2-2-3-8-2","2-2-4-2-7","2-2-4-3-6","2-2-4-4-5","2-2-4-5-4","2-2-4-6-3","2-2-4-7-2","2-2-5-2-6","2-2-5-3-5","2-2-5-4-4","2-2-5-5-3","2-2-5-6-2","2-2-6-2-5","2-2-6-3-4","2-2-6-4-3","2-2-6-5-2","2-2-7-2-4","2-2-7-3-3","2-2-7-4-2","2-2-8-2-3","2-2-8-3-2","2-2-9-2-2","2-3-2-2-8","2-3-2-3-7","2-3-2-4-6","2-3-2-5-5","2-3-2-6-4","2-3-2-7-3","2-3-2-8-2","2-3-3-2-7","2-3-3-3-6","2-3-3-4-5","2-3-3-5-4","2-3-3-6-3","2-3-3-7-2","2-3-4-2-6","2-3-4-3-5","2-3-4-4-4","2-3-4-5-3","2-3-4-6-2","2-3-5-2-5","2-3-5-3-4","2-3-5-4-3","2-3-5-5-2","2-3-6-2-4","2-3-6-3-3","2-3-6-4-2","2-3-7-2-3","2-3-7-3-2","2-3-8-2-2","2-4-2-2-7","2-4-2-3-6","2-4-2-4-5","2-4-2-5-4","2-4-2-6-3","2-4-2-7-2","2-4-3-2-6","2-4-3-3-5","2-4-3-4-4","2-4-3-5-3","2-4-3-6-2","2-4-4-2-5","2-4-4-3-4","2-4-4-4-3","2-4-4-5-2","2-4-5-2-4","2-4-5-3-3","2-4-5-4-2","2-4-6-2-3","2-4-6-3-2","2-4-7-2-2","2-5-2-2-6","2-5-2-3-5","2-5-2-4-4","2-5-2-5-3","2-5-2-6-2","2-5-3-2-5","2-5-3-3-4","2-5-3-4-3","2-5-3-5-2","2-5-4-2-4","2-5-4-3-3","2-5-4-4-2","2-5-5-2-3","2-5-5-3-2","2-5-6-2-2","2-6-2-2-5","2-6-2-3-4","2-6-2-4-3","2-6-2-5-2","2-6-3-2-4","2-6-3-3-3","2-6-3-4-2","2-6-4-2-3","2-6-4-3-2","2-6-5-2-2","2-7-2-2-4","2-7-2-3-3","2-7-2-4-2","2-7-3-2-3","2-7-3-3-2","2-7-4-2-2","2-8-2-2-3","2-8-2-3-2","2-8-3-2-2","2-9-2-2-2","3-2-2-2-8","3-2-2-3-7","3-2-2-4-6","3-2-2-5-5","3-2-2-6-4","3-2-2-7-3","3-2-2-8-2","3-2-3-2-7","3-2-3-3-6","3-2-3-4-5","3-2-3-5-4","3-2-3-6-3","3-2-3-7-2","3-2-4-2-6","3-2-4-3-5","3-2-4-4-4","3-2-4-5-3","3-2-4-6-2","3-2-5-2-5","3-2-5-3-4","3-2-5-4-3","3-2-5-5-2","3-2-6-2-4","3-2-6-3-3","3-2-6-4-2","3-2-7-2-3","3-2-7-3-2","3-2-8-2-2","3-3-2-2-7","3-3-2-3-6","3-3-2-4-5","3-3-2-5-4","3-3-2-6-3","3-3-2-7-2","3-3-3-2-6","3-3-3-3-5","3-3-3-4-4","3-3-3-5-3","3-3-3-6-2","3-3-4-2-5","3-3-4-3-4","3-3-4-4-3","3-3-4-5-2","3-3-5-2-4","3-3-5-3-3","3-3-5-4-2","3-3-6-2-3","3-3-6-3-2","3-3-7-2-2","3-4-2-2-6","3-4-2-3-5","3-4-2-4-4","3-4-2-5-3","3-4-2-6-2","3-4-3-2-5","3-4-3-3-4","3-4-3-4-3","3-4-3-5-2","3-4-4-2-4","3-4-4-3-3","3-4-4-4-2","3-4-5-2-3","3-4-5-3-2","3-4-6-2-2","3-5-2-2-5","3-5-2-3-4","3-5-2-4-3","3-5-2-5-2","3-5-3-2-4","3-5-3-3-3","3-5-3-4-2","3-5-4-2-3","3-5-4-3-2","3-5-5-2-2","3-6-2-2-4","3-6-2-3-3","3-6-2-4-2","3-6-3-2-3","3-6-3-3-2","3-6-4-2-2","3-7-2-2-3","3-7-2-3-2","3-7-3-2-2","3-8-2-2-2","4-2-2-2-7","4-2-2-3-6","4-2-2-4-5","4-2-2-5-4","4-2-2-6-3","4-2-2-7-2","4-2-3-2-6","4-2-3-3-5","4-2-3-4-4","4-2-3-5-3","4-2-3-6-2","4-2-4-2-5","4-2-4-3-4","4-2-4-4-3","4-2-4-5-2","4-2-5-2-4","4-2-5-3-3","4-2-5-4-2","4-2-6-2-3","4-2-6-3-2","4-2-7-2-2","4-3-2-2-6","4-3-2-3-5","4-3-2-4-4","4-3-2-5-3","4-3-2-6-2","4-3-3-2-5","4-3-3-3-4","4-3-3-4-3","4-3-3-5-2","4-3-4-2-4","4-3-4-3-3","4-3-4-4-2","4-3-5-2-3","4-3-5-3-2","4-3-6-2-2","4-4-2-2-5","4-4-2-3-4","4-4-2-4-3","4-4-2-5-2","4-4-3-2-4","4-4-3-3-3","4-4-3-4-2","4-4-4-2-3","4-4-4-3-2","4-5-2-2-2-2","5-2-2-2-2-4","5-2-2-2-3-3","5-2-2-2-4-2","5-2-2-3-2-3","5-2-2-3-3-2","5-2-2-4-2-2","5-2-3-2-2-3","5-2-3-2-3-2","5-2-3-3-2-2","5-2-4-2-2-2","5-3-2-2-2-3","5-3-2-2-3-2","5-3-2-3-2-2","5-3-3-2-2-2","5-4-2-2-2-2","6-2-2-2-2-3","6-2-2-2-3-2","6-2-2-3-2-2","6-2-3-2-2-2","6-3-2-2-2-2","7-2-2-2-2-2","2-2-2-2-2-7","2-2-2-2-3-6","2-2-2-2-4-5","2-2-2-2-5-4","2-2-2-2-6-3","2-2-2-2-7-2","2-2-2-3-2-6","2-2-2-3-3-5","2-2-2-3-4-4","2-2-2-3-5-3","2-2-2-3-6-2","2-2-2-4-2-5","2-2-2-4-3-4","2-2-2-4-4-3","2-2-2-4-5-2","2-2-2-5-2-4","2-2-2-5-3-3","2-2-2-5-4-2","2-2-2-6-2-3","2-2-2-6-3-2","2-2-2-7-2-2","2-2-3-2-2-6","2-2-3-2-3-5","2-2-3-2-4-4","2-2-3-2-5-3","2-2-3-2-6-2","2-2-3-3-2-5","2-2-3-3-3-4","2-2-3-3-4-3","2-2-3-3-5-2","2-2-3-4-2-4","2-2-3-4-3-3","2-2-3-4-4-2","2-2-3-5-2-3","2-2-3-5-3-2","2-2-3-6-2-2","2-2-4-2-2-5","2-2-4-2-3-4","2-2-4-2-4-3","2-2-4-2-5-2","2-2-4-3-2-4","2-2-4-3-3-3","2-2-4-3-4-2","2-2-4-4-2-3","2-2-4-4-3-2","2-2-4-5-2-2","2-2-5-2-2-4","2-2-5-2-3-3","2-2-5-2-4-2","2-2-5-3-2-3","2-2-5-3-3-2","2-2-5-4-2-2","2-2-6-2-2-3","2-2-6-2-3-2","2-2-6-3-2-2","2-2-7-2-2-2","2-3-2-2-2-6","2-3-2-2-3-5","2-3-2-2-4-4","2-3-2-2-5-3","2-3-2-2-6-2","2-3-2-3-2-5","2-3-2-3-3-4","2-3-2-3-4-3","2-3-2-3-5-2","2-3-2-4-2-4","2-3-2-4-3-3","2-3-2-4-4-2","2-3-2-5-2-3","2-3-2-5-3-2","2-3-2-6-2-2","2-3-3-2-2-5","2-3-3-2-3-4","2-3-3-2-4-3","2-3-3-2-5-2","2-3-3-3-2-4","2-3-3-3-3-3","2-3-3-3-4-2","2-3-3-4-2-3","2-3-3-4-3-2","2-3-3-5-2-2","2-3-4-2-2-4","2-3-4-2-3-3","2-3-4-2-4-2","2-3-4-3-2-3","2-3-4-3-3-2","2-3-4-4-2-2","2-3-5-2-2-3","2-3-5-2-3-2","2-3-5-3-2-2","2-3-6-2-2-2","2-4-2-2-2-5","2-4-2-2-3-4","2-4-2-2-4-3","2-4-2-2-5-2","2-4-2-3-2-4","2-4-2-3-3-3","2-4-2-3-4-2","2-4-2-4-2-3","2-4-2-4-3-2","2-4-2-5-2-2","2-4-3-2-2-4","2-4-3-2-3-3","2-4-3-2-4-2","2-4-3-3-2-3","2-4-3-3-3-2","2-4-3-4-2-2","2-4-4-2-2-3","2-4-4-2-3-2","2-4-4-3-2-2","2-4-5-2-2-2","2-5-2-2-2-4","2-5-2-2-3-3","2-5-2-2-4-2","2-5-2-3-2-3","2-5-2-3-3-2","2-5-2-4-2-2","2-5-3-2-2-3","2-5-3-2-3-2","2-5-3-3-2-2","2-5-4-2-2-2","2-6-2-2-2-3","2-6-2-2-3-2","2-6-2-3-2-2","2-6-3-2-2-2","2-7-2-2-2-2","3-2-2-2-2-6","3-2-2-2-3-5","3-2-2-2-4-4","3-2-2-2-5-3","3-2-2-2-6-2","3-2-2-3-2-5","3-2-2-3-3-4","3-2-2-3-4-3","3-2-2-3-5-2","3-2-2-4-2-4","3-2-2-4-3-3","3-2-2-4-4-2","3-2-2-5-2-3","3-2-2-5-3-2","3-2-2-6-2-2","3-2-3-2-2-5","3-2-3-2-3-4","3-2-3-2-4-3","3-2-3-2-5-2","3-2-3-3-2-4","3-2-3-3-3-3","3-2-3-3-4-2","3-2-3-4-2-3","3-2-3-4-3-2","3-2-3-5-2-2","3-2-4-2-2-4","3-2-4-2-3-3","3-2-4-2-4-2","3-2-4-3-2-3","3-2-4-3-3-2","3-2-4-4-2-2","3-2-5-2-2-3","3-2-5-2-3-2","3-2-5-3-2-2","3-2-6-2-2-2","3-3-2-2-2-5","3-3-2-2-3-4","3-3-2-2-4-3","3-3-2-2-5-2","3-3-2-3-2-4","3-3-2-3-3-3","3-3-2-3-4-2","3-3-2-4-2-3","3-3-2-4-3-2","3-3-2-5-2-2","3-3-3-2-2-4","3-3-3-2-3-3","3-3-3-2-4-2","3-3-3-3-2-3","3-3-3-3-3-2","3-3-3-4-2-2","3-3-4-2-2-3","3-3-4-2-3-2","3-3-4-3-2-2","3-3-5-2-2-2","3-4-2-2-2-4","3-4-2-2-3-3","3-4-2-2-4-2","3-4-2-3-2-3","3-4-2-3-3-2","3-4-2-4-2-2","3-4-3-2-2-3","3-4-3-2-3-2","3-4-3-3-2-2","3-4-4-2-2-2","3-5-2-2-2-3","3-5-2-2-3-2","3-5-2-3-2-2","3-5-3-2-2-2","3-6-2-2-2-2","4-2-2-2-2-5","4-2-2-2-3-4","4-2-2-2-4-3","4-2-2-2-5-2","4-2-2-3-2-4","4-2-2-3-3-3","4-2-2-3-4-2","4-2-2-4-2-3","4-2-2-4-3-2","4-2-2-5-2-2","4-2-3-2-2-4","4-2-3-2-3-3","4-2-3-2-4-2","4-2-3-3-2-3","4-2-3-3-3-2","4-2-3-4-2-2","4-2-4-2-2-3","4-2-4-2-3-2","4-2-4-3-2-2","4-2-5-2-2-2","4-3-2-2-2-4","4-3-2-2-3-3","4-3-2-2-4-2","4-3-2-3-2-3","4-3-2-3-3-2","4-3-2-4-2-2","4-3-3-2-2-3","4-3-3-2-3-2","4-3-3-3-2-2","4-3-4-2-2-2","4-4-2-2-2-3","4-4-2-2-3-2","4-4-2-3-2-2","4-4-3-2-2-2","5-2-2-2-2-2-2","2-2-2-2-2-2-5","2-2-2-2-2-3-4","2-2-2-2-2-4-3","2-2-2-2-2-5-2","2-2-2-2-3-2-4","2-2-2-2-3-3-3","2-2-2-2-3-4-2","2-2-2-2-4-2-3","2-2-2-2-4-3-2","2-2-2-2-5-2-2","2-2-2-3-2-2-4","2-2-2-3-2-3-3","2-2-2-3-2-4-2","2-2-2-3-3-2-3","2-2-2-3-3-3-2","2-2-2-3-4-2-2","2-2-2-4-2-2-3","2-2-2-4-2-3-2","2-2-2-4-3-2-2","2-2-2-5-2-2-2","2-2-3-2-2-2-4","2-2-3-2-2-3-3","2-2-3-2-2-4-2","2-2-3-2-3-2-3","2-2-3-2-3-3-2","2-2-3-2-4-2-2","2-2-3-3-2-2-3","2-2-3-3-2-3-2","2-2-3-3-3-2-2","2-2-3-4-2-2-2","2-2-4-2-2-2-3","2-2-4-2-2-3-2","2-2-4-2-3-2-2","2-2-4-3-2-2-2","2-2-5-2-2-2-2","2-3-2-2-2-2-4","2-3-2-2-2-3-3","2-3-2-2-2-4-2","2-3-2-2-3-2-3","2-3-2-2-3-3-2","2-3-2-2-4-2-2","2-3-2-3-2-2-3","2-3-2-3-2-3-2","2-3-2-3-3-2-2","2-3-2-4-2-2-2","2-3-3-2-2-2-3","2-3-3-2-2-3-2","2-3-3-2-3-2-2","2-3-3-3-2-2-2","2-3-4-2-2-2-2","2-4-2-2-2-2-3","2-4-2-2-2-3-2","2-4-2-2-3-2-2","2-4-2-3-2-2-2","2-4-3-2-2-2-2","2-5-2-2-2-2-2","3-2-2-2-2-2-4","3-2-2-2-2-3-3","3-2-2-2-2-4-2","3-2-2-2-3-2-3","3-2-2-2-3-3-2","3-2-2-2-4-2-2","3-2-2-3-2-2-3","3-2-2-3-2-3-2","3-2-2-3-3-2-2","3-2-2-4-2-2-2","3-2-3-2-2-2-3","3-2-3-2-2-3-2","3-2-3-2-3-2-2","3-2-3-3-2-2-2","3-2-4-2-2-2-2","3-3-2-2-2-2-3","3-3-2-2-2-3-2","3-3-2-2-3-2-2","3-3-2-3-2-2-2","3-3-3-2-2-2-2","3-4-2-2-2-2-2","4-2-2-2-2-2-3","4-2-2-2-2-3-2","4-2-2-2-3-2-2","4-2-2-3-2-2-2","4-2-3-2-2-2-2","4-3-2-2-2-2-2","2-2-2-2-2-2-2-3","2-2-2-2-2-2-3-2","2-2-2-2-2-3-2-2","2-2-2-2-3-2-2-2","2-2-2-3-2-2-2-2","2-2-3-2-2-2-2-2","2-3-2-2-2-2-2-2","3-2-2-2-2-2-2-2"];
      this.timeline.combos = [[], [], [], combo3, combo4, combo5, combo6, combo7, combo8, combo9, combo10, combo11, combo12, combo13, combo14, combo15, combo16, combo17];
      var getCombosSumNumber = (sumNum: number, numDigs: number): Array<any> => {
         //EX: num=9, numDigs=1
         var minNum = numDigs === 1 ? sumNum : 2;
         var maxNum = (sumNum - (2 * numDigs)) + 2;
         var numsArr = [];
         for (var a = minNum; a <= maxNum; a++) {
            numsArr.push(a);
         }
         var comArr = [], comAllArr = [], comStrArr = [], comStr = "";
         for (var i = 0; i < numDigs; i++) {
            comArr.push(numsArr[0]);
         }
         var n = Math.pow(numsArr.length, numDigs);
         var d = numDigs - 1;
         for (var i = 0; i < n; i++) {
            d = numDigs - 1;
            comArr[d]++;
            while (comArr[d] && comArr[d] > (numsArr.length - 1)) {
               comArr[d] = 0;
               d--;
               if (d >= 0) {
                  comArr[d]++;
               }
            }
            comAllArr.push(comArr.slice());
         }
         var sumCom = 0;
         var comStrArr1 = [];
         for (var i = 0; i < comAllArr.length; i++) {
            sumCom = 0;
            comStrArr1 = [];
            for (var j = 0; j < comAllArr[i].length; j++) {
               sumCom += numsArr[comAllArr[i][j]];
               comStrArr1.push(numsArr[comAllArr[i][j]]);
            }
            comStr = comStrArr1.join("-");
            if (sumCom === sumNum && comStrArr.indexOf(comStr) < 0) {
               comStrArr.push(comStr);
            }
         }
         return comStrArr;
      };
      //var midComNum = 0, combosArray = [];
      //for (var c = 9; c < 20; c++) {
      //   midComNum = Math.floor(c / 2.0);
      //   combosArray = [];
      //   for (var numDigs = 1; numDigs <= midComNum; numDigs++) {
      //      combosArray = combosArray.concat(getCombosSumNumber(c, numDigs));
      //   }
      //   this.timeline.combos.push(combosArray);
      //}
      //console.log("this.timeline.combos = " + JSON.stringify(this.timeline.combos));
      this.timeline.event_year = "";
      this.timeline.event_date = "";
      this.timeline.major_count = this.timeline.major_counts[0];
      this.timeline.major_count_again = this.timeline.major_counts_again[0];
      this.timeline.selectedMonth = this.timeline.months[new Date().getMonth()];
      this.getMonthDays();
      this.timeline.selectedDay = new Date().getDate();
      this.timeline.radio_groups = [];
      //BOOLEANS
      this.is_event_edit = false;
      this.display_savedwords = false;
      //STRING ARRAYS:
      this.input_saved_numbers = [];
      this.input_saved_words = [];
      this.input_saved_infos = [];
      //INTEGERS:
      this.number = 0;
      this.total = 0;
      this.rb_number = 0;
      //STRINGS:
      this.begnum = "";
      this.midnum = "";
      this.endnum = "";
      this.which_events = "";
      this.id = "";
      this.password = "";
      this.wriwor = "";
      this.year = "";
      this.date = "";
      this.edit_date_number = "";
      this.display_date = "";
      this.date_number_string = "";
      this.text = "";
      this.type_clause = "";
      this.saved_words = "";
      this.table = "";
      this.lfq_table = "";
      this.sql = "";
      this.database_string = "";
      //EDIT TEXTS ARRAY:
      this.input_words = [];
      //RADIO GROUPS ARRAY:
      this.radio_groups = [];
      this.find_word = "";
      this.rb_index = 0;
      this.timeline.isChooseCondensedCombos = false;
      this.timeline.isAscending = true;
      this.timeline.isCurrentEventEdit = false;
      this.timeline.savedCurrentEventEditID = null;
      this.timeline.isShowingMenu = false;
      this.timeline.subscribedMenuToolbarEvent = this.helpers.menuToolbarEvent.subscribe((isShown) => {
         this.timeline.isShowingMenu = isShown;
      });
      var val = await this.storage.get('SHOW_TIMELINE_MAJOR_COUNT');
      if (val != null) { this.timeline.major_count = val; }
      val = await this.storage.get('SHOW_TIMELINE_MAJOR_COUNT_AGAIN');
      if (val != null) { this.timeline.major_count_again = val; }
      val = await this.storage.get('SHOW_TIMELINE_IS_COMBINE_YEAR_DATE');
      if (val != null) { this.timeline.isCombineYearDate = val; }
      val = await this.storage.get('SHOW_TIMELINE_IS_COMBINE_YEAR_DATE_AGAIN');
      if (val != null) { this.timeline.isCombineYearDateAgain = val; }
      val = await this.storage.get('SHOW_TIMELINE_IS_EDIT_SHOW');
      if (val != null) { this.timeline.isEditShow = val; }
      val = await this.storage.get('SHOW_TIMELINE_IS_SHARED');
      if (Helpers.User.Username === 'GUEST') {
         this.timeline.isShared = true;
      } else {
         if (val != null) { this.timeline.isShared = val; }
      }
      val = await this.storage.get('SHOW_TIMELINE_SELECTED_ACTION_SHARED');
      if (val != null) { this.timeline.selectedActionShared = val; }
      val = await this.storage.get('SHOW_TIMELINE_IS_ASCENDING');
      if (val != null) { this.timeline.isAscending = val; }
      val = await this.storage.get('SHOW_TIMELINE_SELECTED_ACTION_USERS');
      if (val != null) { this.timeline.selectedActionUsers = val; }
      val = await this.storage.get('SHOW_TIMELINE_USER_TYPE');
      if (val != null) { this.timeline.selectedUserType = val; }
      val = await this.storage.get('SHOW_TIMELINE_IS_MNEMONICS');
      if (val != null) { this.timeline.isMnemonics = val; }
      val = await this.storage.get('SHOW_TIMELINE_IS_CONDENSED_COMBOS');
      if (val != null) { this.timeline.isChooseCondensedCombos = val };
      console.log("this.timeline.selectedActionShared = " + this.timeline.selectedActionShared + ", this.timeline.selectedActionUsers=" + this.timeline.selectedActionUsers); this.background_color = Helpers.background_color;
      this.button_color = Helpers.button_color;
      this.button_gradient = Helpers.button_gradient;
      this.timeline.subscribedBackgroundColorEvent = this.helpers.backgroundColorEvent.subscribe((bgColor:any) => {
         this.background_color = bgColor;
      });
      this.timeline.subscribedButtonColorEvent = this.helpers.buttonColorEvent.subscribe((buttonColor:any) => {
         this.button_color = buttonColor.value;
         this.button_gradient = buttonColor.gradient;
      });

      this.database_misc = this.helpers.getDatabaseMisc();
      this.setTable();
      this.getCompleted().then(async () => {
         this.filterUserYears();
         this.timeline.peglist = await this.helpers.getPeglist();
         val = await this.storage.get('SHOW_TIMELINE_IS_CURRENT_EDIT_EVENTS');
         console.log("GET SHOW_TIMELINE_IS_CURRENT_EDIT_EVENTS val = " + val);
         if (val != null) { this.timeline.isCurrentEventEdit = val; }
         if (this.timeline.isCurrentEventEdit === true) {
            val = await this.storage.get('SHOW_TIMELINE_SELECTED_YEAR');
            if (val != null) { this.timeline.selectedYear = val; }
            val = await this.storage.get('SHOW_TIMELINE_CURRENT_EDIT_EVENT_YEAR');
            if (val != null) { this.year = val; }
            val = await this.storage.get('SHOW_TIMELINE_SELECTED_MONTH');
            if (val != null) { this.timeline.selectedMonth = val; }
            val = await this.storage.get('SHOW_TIMELINE_SELECTED_DAY');
            if (val != null) { this.timeline.selectedDay = val; }
            val = await this.storage.get('SHOW_TIMELINE_CURRENT_EDIT_EVENT_DATE');
            if (val != null) { this.date = val; }
            val = await this.storage.get('SHOW_TIMELINE_SAVED_CURRENT_EDIT_EVENT_TOTAL');
            if (val != null) { this.total = val; }
            val = await this.storage.get('SHOW_TIMELINE_SAVED_CURRENT_EDIT_EVENT_NUMBER');
            if (val != null) { this.number = parseInt(val); }
            val = await this.storage.get('SHOW_TIMELINE_SAVED_CURRENT_EDIT_EVENT_ID');
            if (val != null) { this.timeline.savedCurrentEventEditID = val; }
            //TO DO CALL FUNCTION TO GET EDIT EVENT!:
            if (this.timeline.savedCurrentEventEditID) {
               console.log("BEFORE this.number = " + this.number);
               if (this.number > 0) {
                  this.number--;
               }
               if (this.timeline.isAscending === true) {
                  this.timeline.savedCurrentEventEditID = String(parseInt(this.timeline.savedCurrentEventEditID) - 1);
               } else {
                  this.timeline.savedCurrentEventEditID = String(parseInt(this.timeline.savedCurrentEventEditID) + 1);
               }
               console.log("AFTER this.number = " + this.number);
               this.id = this.timeline.savedCurrentEventEditID;
               this.which_events = "";
               if (this.timeline.isShared === true) {
                  console.log("SETTING IS SHARED VALUES...");
                  this.which_events = this.timeline.selectedActionShared;//DATE_EVENTS, YEAR_EVENTS, ALL_SAVED
                  this.table = Helpers.TABLES_MISC.event_table;
               } else if (this.timeline.isShared === false) {
                  console.log("SETTING IS NOT SHARED VALUES...");
                  this.which_events = this.timeline.selectedActionUsers;//YEAR_EVENTS, ALL_SAVED
                  this.table = Helpers.TABLES_MISC.user_event;
                  this.type_clause = this.timeline.selectedUserType;

               }
               this.timeline.isShowTimelineResults = true;
               this.getEvent(true);
            } else {
               this.timeline.isShowTimelineResults = true;
               this.getEvents();
            }
         }
      });
   }


   ionViewWillLeave() {
      console.log('ionViewWillLeave ShowTimelinePage');
      this.timeline.subscribedMenuToolbarEvent.unsubscribe();
      this.timeline.subscribedBackgroundColorEvent.unsubscribe();
      this.timeline.subscribedButtonColorEvent.unsubscribe();
      this.saveStorage();
   }

   async saveStorage() {
      console.log("saveStorage called");
      await this.storage.set('SHOW_TIMELINE_MAJOR_COUNT', this.timeline.major_count);
      await this.storage.set('SHOW_TIMELINE_MAJOR_COUNT_AGAIN', this.timeline.major_count_again);
      await this.storage.set('SHOW_TIMELINE_IS_COMBINE_YEAR_DATE', this.timeline.isCombineYearDate);
      await this.storage.set('SHOW_TIMELINE_IS_COMBINE_YEAR_DATE_AGAIN', this.timeline.isCombineYearDateAgain);
      await this.storage.set('SHOW_TIMELINE_IS_EDIT_SHOW', this.timeline.isEditShow);
      await this.storage.set('SHOW_TIMELINE_IS_SHARED', this.timeline.isShared);
      await this.storage.set('SHOW_TIMELINE_USER_TYPE', this.timeline.selectedUserType);
      await this.storage.set('SHOW_TIMELINE_SELECTED_ACTION_SHARED', this.timeline.selectedActionShared);
      await this.storage.set('SHOW_TIMELINE_SELECTED_ACTION_USERS', this.timeline.selectedActionUsers);
      await this.storage.set('SHOW_TIMELINE_IS_ASCENDING', this.timeline.isAscending);
      await this.storage.set('SHOW_TIMELINE_IS_MNEMONICS', this.timeline.isMnemonics);
      await this.storage.set('SHOW_TIMELINE_IS_CONDENSED_COMBOS', this.timeline.isChooseCondensedCombos);
      await this.storage.set('SHOW_TIMELINE_CONDENSED_COMBO', this.timeline.condensedCombination);
      console.log("SAVED this.timeline.condensedCombination = " + this.timeline.condensedCombination);
      console.log("saveStorage, this.timeline.isCurrentEventEdit = " + this.timeline.isCurrentEventEdit);
      if (this.timeline.isCurrentEventEdit === true) {
         this.saveCurrentEditEvents().then(() => {
         });
      }
   }

   async saveCurrentEditEvents(): Promise<any> {
      console.log("saveCurrentEditEvents called");
      return new Promise(async (resolve, reject) => {
         await this.storage.set('SHOW_TIMELINE_IS_CURRENT_EDIT_EVENTS', this.timeline.isCurrentEventEdit);
         await this.storage.set('SHOW_TIMELINE_SELECTED_YEAR', this.timeline.selectedYear);
         await this.storage.set('SHOW_TIMELINE_CURRENT_EDIT_EVENT_YEAR', this.year);
         await this.storage.set('SHOW_TIMELINE_SELECTED_MONTH', this.timeline.selectedMonth);
         await this.storage.set('SHOW_TIMELINE_SELECTED_DAY', this.timeline.selectedDay);
         await this.storage.set('SHOW_TIMELINE_CURRENT_EDIT_EVENT_DATE', this.date);
         await this.storage.set('SHOW_TIMELINE_SAVED_CURRENT_EDIT_EVENT_TOTAL', this.total);
         await this.storage.set('SHOW_TIMELINE_SAVED_CURRENT_EDIT_EVENT_NUMBER', this.number);
         await this.storage.set('SHOW_TIMELINE_SAVED_CURRENT_EDIT_EVENT_ID', this.id);
         //TO DO: SAVE SELECTED WORDS:...                                                                        
         var selectedIndexes = this.timeline.radio_groups.map((rg:any) => { return rg.selectedIndex; });
         await this.storage.set('SHOW_TIMELINE_SAVED_SELECTED_INDEXES', selectedIndexes);
         await this.storage.set('SHOW_TIMELINE_SAVED_OWN_WORDS', this.list_own_words);
         await this.storage.set('SHOW_TIMELINE_SAVED_OWN_WORD_INFOS', this.list_own_word_infos);
         await this.storage.set('SHOW_TIMELINE_SAVED_SELECTED_INDEXES', selectedIndexes);
         if (this.timeline.mnemonics == null) {
            console.log("saveCurrentEditEvents finished SAVING EVENT WORK");
            resolve(null);
         } else {
            await this.storage.set('SHOW_TIMELINE_SAVED_MNEMONICS', this.timeline.mnemonics);
            console.log("saveCurrentEditEvents finished SAVING EVENT WORK");
            resolve(null);
         }
      });
   }


   getCompleted(): Promise<void> {
      console.log("getCompleted called");
      return new Promise((resolve, reject) => {
         this.helpers.setProgress("Loading completed events ,please wait...", false).then(() => {
            if (Helpers.isWorkOffline === false) {
               this.helpers.makeHttpRequest("/lfq_directory/php/initiate_timeline.php", "GET", null).then((data) => {
                  if (data["SUCCESS"] === true) {
                     //console.log("this.timeline.events_complete=" + this.timeline.events_complete);
                     this.getEventsCompletedRows(data["EVENTS_COMPLETE"]);
                     this.helpers.makeHttpRequest("/lfq_directory/php/timeline_get_all_event_years.php", "GET", null).then((data) => {
                        this.timeline.years = [];
                        if (data["SUCCESS"] === true) {
                           for (var i = 0; i < data["EVENT_YEARS"].length; i++) {
                              data["EVENT_YEARS"][i].Year = this.helpers.getYearBC(String(data["EVENT_YEARS"][i].Year));
                              this.timeline.years.push(data["EVENT_YEARS"][i]);
                           }
                           this.timeline.selectedYear = this.timeline.years[0];
                           var params = {
                              "username": Helpers.User.Username,
                              "isUsersSelectType": true,
                              "selectedUserType": "HISTORICAL",
                              "type": "HISTORICAL"
                           }
                           this.helpers.makeHttpRequest("/lfq_directory/php/timeline_get_user_event_times.php", "POST", params).then((data) => {
                              this.timeline.yearsUserHistorical = [];
                              if (data["SUCCESS"] === true) {
                                 for (var i = 0; i < data["EVENT_YEARS"].length; i++) {
                                    data["EVENT_YEARS"][i].Year = this.helpers.getYearBC(String(data["EVENT_YEARS"][i].Year));
                                    this.timeline.yearsUserHistorical.push(data["EVENT_YEARS"][i]);
                                 }
                                 console.log("this.timeline.yearsUserHistorical.length = " + JSON.stringify(this.timeline.yearsUserHistorical.length));
                                 this.timeline.selectedYearUserHistorical = this.timeline.yearsUserHistorical[0];
                                 var params = {
                                    "username": Helpers.User.Username,
                                    "isUsersSelectType": true,
                                    "selectedUserType": "PERSONAL",
                                    "type": "PERSONAL"
                                 }
                                 this.helpers.makeHttpRequest("/lfq_directory/php/timeline_get_user_event_times.php", "POST", params).then((data) => {
                                    this.helpers.dismissProgress();
                                    if (data["SUCCESS"] === true) {
                                       this.timeline.yearsUserPersonal = [];
                                       for (var i = 0; i < data["EVENT_YEARS"].length; i++) {
                                          data["EVENT_YEARS"][i].Year = this.helpers.getYearBC(String(data["EVENT_YEARS"][i].Year));
                                          this.timeline.yearsUserPersonal.push(data["EVENT_YEARS"][i]);
                                       }
                                       console.log("this.timeline.yearsUserPersonal.length = " + this.timeline.yearsUserPersonal.length);
                                       this.timeline.selectedYear = this.timeline.years[0];
                                       this.timeline.selectedYearUserPersonal = this.timeline.yearsUserPersonal[0];
                                       resolve();
                                    } else {
                                       this.helpers.alertLfqError(data["ERROR"]);
                                       resolve();
                                    }
                                 }, error => {
                                    this.helpers.dismissProgress();
                                    this.helpers.alertServerError(error.message);
                                    resolve();
                                 });
                              } else {
                                 this.helpers.dismissProgress();
                                 this.helpers.alertLfqError(data["ERROR"]);
                                 resolve();
                              }
                           }, error => {
                              this.helpers.dismissProgress();
                              this.helpers.alertServerError(error.message);
                              resolve();
                           });
                        } else {
                           this.helpers.dismissProgress();
                           this.helpers.alertLfqError(data["ERROR"]);
                           resolve();
                        }
                     }, error => {
                        this.helpers.dismissProgress();
                        this.helpers.alertServerError(error.message);
                        resolve();
                     });
                  } else {
                     this.helpers.dismissProgress();
                     this.helpers.alertLfqError(data["ERROR"]);
                     resolve();
                  }
               }, error => {
                  this.helpers.dismissProgress();
                  this.helpers.alertServerError(error.message);
                  resolve();
               });

            } else {
               var sql = "SELECT Date, Number1 FROM " + Helpers.TABLES_MISC.event_table + " ORDER BY Date";
               this.helpers.query(this.database_misc, sql, []).then((data) => {
                  var completed_event_rows = [];
                  for (var i = 0; i < data.rows.length; i++) {
                     completed_event_rows.push(data.rows.item(i));
                  }
                  this.getEventsCompletedRows(completed_event_rows);
                  this.helpers.setProgress("Loading shared years...", true).then(() => {
                     sql = "SELECT DISTINCT Year FROM ";
                     sql += Helpers.TABLES_MISC.event_table + " ";
                     sql += "ORDER BY Year ASC";
                     this.helpers.query(this.database_misc, sql, []).then((data) => {
                        console.log("EVENT2 DISTINCT YEARS LENGTH = " + data.rows.length);
                        for (var i = 0; i < data.rows.length; i++) {
                           this.timeline.years.push(this.helpers.getYearBC(String(data.rows.item(i).Year)));
                        }
                        console.log("YEARS = " + this.timeline.years);
                        this.timeline.selectedYear = this.timeline.years[0];
                        //GET USER HISTORICAL YEARS:--------------------------------------------------------------------------------------------
                        this.helpers.setProgress("Loading " + Helpers.User.Username + "'s historical years...", true).then(() => {
                           sql = "SELECT DISTINCT Year FROM ";
                           sql += Helpers.TABLES_MISC.user_event + " ";
                           sql += "WHERE Event_Type_ID='2' ORDER BY Year ASC";
                           this.helpers.query(this.database_misc, sql, []).then((data) => {
                              if (data.rows.length > 0) {
                                 for (var i = 0; i < data.rows.length; i++) {
                                    this.timeline.yearsUserHistorical.push(this.helpers.getYearBC(String(data.rows.item(i).Year)));
                                 }
                                 this.timeline.selectedYearUserHistorical = this.timeline.yearsUserHistorical[0];
                              }
                              //GET USER PERSONAL YEARS:--------------------------------------------------------------------------------------------
                              this.helpers.setProgress("Loading " + Helpers.User.Username + "'s personal years...", true).then(() => {
                                 sql = "SELECT DISTINCT Year FROM ";
                                 sql += Helpers.TABLES_MISC.user_event + " ";
                                 sql += "WHERE Event_Type_ID='1' ";
                                 sql += "ORDER BY Year ASC";
                                 this.helpers.query(this.database_misc, sql, []).then((data) => {
                                    if (data.rows.length > 0) {
                                       for (var i = 0; i < data.rows.length; i++) {
                                          this.timeline.yearsUserPersonal.push(this.helpers.getYearBC(String(data.rows.item(i).Year)));
                                       }
                                       this.timeline.selectedYearUserPersonal = this.timeline.yearsUserPersonal[0];
                                    }
                                    this.helpers.dismissProgress();
                                    resolve();
                                 }).catch((error) => {//END SELECT QUERY
                                    console.log("sql:" + sql + ", ERROR:" + error.message);
                                    this.helpers.dismissProgress();
                                    resolve();
                                 });
                              });//END GET USER PERSONAL YEARS
                           }).catch((error) => {//END SELECT QUERY
                              console.log("sql:" + sql + ", ERROR:" + error.message);
                              this.helpers.dismissProgress();
                              resolve();
                           });
                        });//END GET USER HISTORICAL YEARS
                     }).catch((error) => {//END SELECT QUERY
                        console.log("sql:" + sql + ", ERROR:" + error.message);
                        this.helpers.dismissProgress();
                        resolve();
                     });
                  });
               }).catch((error) => {//END SELECT QUERY
                  console.log("sql:" + sql + ", ERROR:" + error.message);
                  this.helpers.dismissProgress();
                  resolve();
               });
            }
         });
      });//END PROMISE
   }

   getEventsCompletedRows(events_completed:any): void {
      console.log("getEventsCompletedRows called");
      this.timeline.completed = [];
      var month_index = 0, day = 0, date_formatted = "";
      var countComplete = 0, countTotal = 0, countCompleteTotal = 0;
      var uniqueDates = events_completed.map((event:any) => { return event.Date }).filter(this.helpers.onlyUnique).sort(this.helpers.sortArray(false));
      var dateGroup = [];
      for (var i = 0; i < uniqueDates.length; i++) {
         dateGroup = events_completed.filter((event:any) => { return event.Date === uniqueDates[i] });
         countComplete = dateGroup.filter((event:any) => { return event.Number1 != null && event.Number1 !== '' }).length;
         countCompleteTotal += countComplete;
         month_index = parseInt(uniqueDates[i].split("-")[0]) - 1;
         day = parseInt(uniqueDates[i].split("-")[1]);
         date_formatted = this.timeline.months[month_index] + " " + day;
         this.timeline.completed.push({ "prompt0": "", "date_formatted": date_formatted, "prompt1": "---", "date": uniqueDates[i], "count_saved_date": countComplete, "prompt2": "Events Have Words Chosen" });
      }
      this.timeline.completed.unshift({ "prompt0": "Total #:", "date_formatted": countCompleteTotal, "date": 0, "prompt1": "Of", "count_saved_date": events_completed.length, "prompt2": "Events" });
   }

   getEvent(isGetNext:boolean | null) {
      console.log("getEvent called");
      var action = "";
      var prompt = "";
      if (isGetNext === false) {
         action = "last";
         prompt = "last";
      } else if (isGetNext === true) {
         action = "next";
         prompt = "next";
      } else if (isGetNext == null) {
         action = "get";
         prompt = "";
      }
      //this.timeline.radio_groups = [];
      this.is_event_edit = false;
      this.helpers.setProgress("Getting " + prompt + " event ,please wait...", false).then(() => {
         this.year = this.helpers.getYearInteger(this.year);
         if (Helpers.isWorkOffline === false) {
            var params = {
               "is_ascend": this.timeline.isAscending,
               "is_shared": this.timeline.isShared,
               "action": action,
               "userType": this.timeline.selectedUserType,
               "username": Helpers.User.Username,
               "is_edit": this.timeline.isEditShow,
               "which_events": this.which_events,
               "date": this.date,
               "year": this.year,
               "id": this.id
            };
            this.helpers.makeHttpRequest("/lfq_app_php/timeline_get_event.php", "GET", params).then((data) => {
               if (data["SUCCESS"] === true) {
                  if (data["EVENT"]) {
                     var myData = [];
                     myData.push(data["EVENT"]);
                     this.showGetLastNextData(myData, isGetNext);
                  } else {
                     this.showGetLastNextData(null, isGetNext);
                  }
               } else {
                  this.helpers.dismissProgress();
                  this.helpers.alertLfqError(data["ERROR"]);
               }
            }, error => {
               console.log("sql:" + sql + ", ERROR:" + error.message);
               this.helpers.dismissProgress();
               this.helpers.alertServerError(error.message);
            });

         } else {
            var user_clause = "";
            var number_clause = "";
            var comparison_clause = "";
            var ascending_clause = "";
            if (isGetNext === false) {
               comparison_clause = this.timeline.isAscending === true ? "<" : ">";
               ascending_clause = this.timeline.isAscending === true ? "DESC" : "ASC";
            } else {
               comparison_clause = this.timeline.isAscending === true ? ">" : "<";
               ascending_clause = this.timeline.isAscending === true ? "ASC" : "DESC";
            }
            if (this.timeline.isShared === false) {//FOR USER TABLE:
               var Data_Type_ID = (this.type_clause && this.type_clause === "PERSONAL") ? "1" : "2";
               user_clause = " AND et.User_ID='" + Helpers.User.ID + "' AND et.Data_Type_ID='" + Data_Type_ID + "'";
            }
            if (this.timeline.isEditShow === true) {
               this.timeline.mnemonics = null;
               number_clause = " AND (et.Number1 IS NULL OR et.Number1='')";
            } else {//isEditShow === false => For showing events with chosen major words only:
               number_clause = " AND (et.Number1 IS NOT NULL AND et.Number1!='')";
            }
            if (this.which_events === "YEAR_EVENTS") {
               if (this.year.length === 0) {
                  this.timeline.resultsTop = "<b>MUST SELECT A YEAR</b>";
                  return;
               }
               var sql_total = "SELECT COUNT(ID) FROM " + this.table + " WHERE Year='" + this.year + "'" + number_clause + user_clause;
               var sql = "";
               if (isGetNext != null) {
                  var sql_count_next = "SELECT COUNT(ID) FROM " + this.table + " WHERE Year='" + this.year + "' AND (Date" + comparison_clause + "'" + this.date + "' OR (Date='" + this.date + "' AND ID" + comparison_clause + "'" + this.id + "'))" + number_clause + user_clause + " ORDER BY DATE " + ascending_clause + ",ID " + ascending_clause;
                  sql = "SELECT et.*,ud.Username,(" + sql_total + ") AS TOTAL,(" + sql_count_next + ") AS COUNT_NEXT FROM ";
                  sql += this.table + " AS et ";
                  sql += "LEFT JOIN " + Helpers.TABLES_MISC.userdata + " AS ud ON ud.ID=et.User_ID ";
                  sql += "WHERE et.Year='" + this.year + "' AND (et.Date" + comparison_clause + "'" + this.date + "' OR (et.Date='" + this.date + "' AND et.ID" + comparison_clause + "'" + this.id + "'))" + number_clause + user_clause + " ";
                  sql += "ORDER BY et.Date " + ascending_clause + ", et.ID " + ascending_clause + " LIMIT 1";
               } else {
                  sql = "SELECT et.*,ud.Username,(" + sql_total + ") AS TOTAL,(" + sql_total + ") AS COUNT_NEXT FROM ";
                  sql += this.table + " AS et ";
                  sql += "LEFT JOIN " + Helpers.TABLES_MISC.userdata + " ON ud.ID=et.User_ID ";
                  sql += "WHERE et.Year='" + this.year + "'" + number_clause + user_clause + " ";
                  sql += "ORDER BY et.Date " + ascending_clause + ",et.ID " + ascending_clause + " LIMIT 1";
               }
               console.log("GET BY YEAR sql=" + sql);
               this.helpers.query(this.database_misc, sql, []).then((data) => {
                  if (data && data.rows) {
                     var myData = [];
                     if (data.rows.length > 0) {
                        myData.push(data.rows.item(0));
                     }
                     this.showGetLastNextData(myData, isGetNext);
                  } else {
                     this.helpers.dismissProgress();
                  }
               }).catch((error) => {//END SELECT QUERY
                  console.log("sql:" + sql + ", ERROR:" + error.message);
                  this.helpers.dismissProgress();
               });
            }
            if (this.which_events === "DATE_EVENTS") {// ** DATE_EVENTS NOT DONE FOR USER EVENTS: DO NOT NEED user_clause !!!!!
               var sql_total = "SELECT COUNT(ID) FROM " + this.table + " WHERE Date='" + this.date + "'" + number_clause + user_clause;
               var sql = "";
               if (isGetNext != null) {
                  var sql_count_next = "SELECT COUNT(ID) FROM " + this.table + " WHERE Date='" + this.date + "' AND (Year" + comparison_clause + "'" + this.year + "' OR (Year='" + this.year + "' AND ID" + comparison_clause + "'" + this.id + "'))" + number_clause + user_clause + " ORDER BY Year " + ascending_clause + ",ID " + ascending_clause;
                  sql = "SELECT et.*,ud.Username,(" + sql_total + ") AS TOTAL,(" + sql_count_next + ") AS COUNT_NEXT FROM ";
                  sql += this.table + " AS et ";
                  sql += "LEFT JOIN " + Helpers.TABLES_MISC.userdata + " AS ud ON ud.ID=et.User_ID ";
                  sql += "WHERE et.Date='" + this.date + "' AND (et.Year" + comparison_clause + "'" + this.year + "' OR (et.Year='" + this.year + "' AND et.ID" + comparison_clause + "'" + this.id + "'))" + number_clause + user_clause + " ";
                  sql += "ORDER BY et.Year " + ascending_clause + ",et.ID " + ascending_clause + " LIMIT 1";
               } else {
                  sql = "SELECT et.*,ud.Username,(" + sql_total + ") AS TOTAL,(" + sql_total + ") AS COUNT_NEXT FROM ";
                  sql += this.table + " AS et ";
                  sql += "LEFT JOIN " + Helpers.TABLES_MISC.userdata + " AS ud ON ud.ID=et.User_ID ";
                  sql += "WHERE et.Date='" + this.date + "'" + number_clause + user_clause + " ";
                  sql += "ORDER BY et.Date " + ascending_clause + ",ID " + ascending_clause + " LIMIT 1";
               }
               console.log("GET LAST BY DATE, sql_dates=" + sql);
               this.helpers.query(this.database_misc, sql, []).then((data) => {
                  if (data && data.rows) {
                     var myData = [];
                     if (data.rows.length > 0) {
                        myData.push(data.rows.item(0));
                     }
                     this.showGetLastNextData(myData, isGetNext);
                  } else {
                     this.helpers.dismissProgress();
                  }
               }).catch((error) => {//END SELECT QUERY
                  console.log("sql:" + sql + ", ERROR:" + error.message);
                  this.helpers.dismissProgress();
               });
            }
         }
      });
   }


   showGetLastNextData(data:any, isNext:boolean | null) {
      console.log("showGetLastNextData called, isNext=" + isNext);
      console.log("showGetLastNextData data = " + JSON.stringify(data));
      if (this.timeline.isEditShow === false) {
         if (this.timeline.isEditWordsAgain === true) {
            this.timeline.isEditWordsAgain = false;
            this.timeline.resultsBottom = "";
         }
      }
      if (data && data.length > 0) {
         this.timeline.getOld = Object.assign(data[0]);
         console.log("showGetLastNextData this.timeline.getOld = " + JSON.stringify(this.timeline.getOld));
         this.total = data[0].TOTAL;
         if (isNext === true) {
            this.number = this.total - data[0].COUNT_NEXT + 1;
         } else if (isNext === false) {
            this.number = data[0].COUNT_NEXT;
         } else if (isNext == null) {
            this.number = this.total - data[0].COUNT_NEXT + 1;
            var seanumyea = this.year.replace(" BC", "");
            seanumyea = String(seanumyea);
            seanumyea = seanumyea.replace(/^0+/, '');
            var compnumb = seanumyea + this.date_number_string;
            this.timeline.selectedCombos = this.timeline.combos[compnumb.length];
         }
         if (this.which_events === "YEAR_EVENTS") {
            this.display_date = this.timeline.months[parseInt(data[0].Date.substring(0, 2)) - 1]
               + " " + data[0].Date.substring(3);
         }
         this.timeline.event = data[0].Event;
         this.timeline.eventUsername = data[0].Username;
         console.log("this.timeline.eventUsername = " + this.timeline.eventUsername);
         this.id = data[0].ID;
         this.date = data[0].Date;
         this.date_number_string = String(parseInt(data[0].Date.substring(0, 2))).replace(/^0+/, '')
            + String(parseInt(data[0].Date.substring(3))).replace(/^0+/, '');
         this.display_date = this.timeline.months[parseInt(data[0].Date.substring(0, 2)) - 1] + " "
            + data[0].Date.substring(3);
         this.year = this.helpers.getYearBC(String(data[0].Year));
         this.timeline.event_year = "<b>YEAR:" + this.year + "</b>";
         this.timeline.event_date = "<b>DATE:" + this.date + "</b>";
         var seanumyea = this.year.replace(" BC", "");
         seanumyea = String(seanumyea);
         seanumyea = seanumyea.replace(/^0+/, '');
         var compnumb = seanumyea + this.date_number_string;
         this.timeline.selectedCombos = this.timeline.combos[compnumb.length];
         this.timeline.resultsTop = "<b>" + this.number + " OF " + this.total + " EVENTS.</b>";
         this.timeline.event_year = "<b>YEAR:" + this.year + "</b>";
         this.timeline.event_date = "<b>DATE:" + this.date + "</b>";
         this.timeline.resultsBottom = "";
         var date_split = this.date.split("-");
         this.timeline.promptPeglist = this.timeline.peglist[parseInt(date_split[0])] + "(" + date_split[0] + ") " + this.timeline.peglist[parseInt(date_split[1])] + "(" + date_split[1] + ")";
         if (this.timeline.isEditShow === false) {
            var hm:any = {};
            this.saved_words = "";
            this.timeline.savedWords = "";
            for (var i = 1; i <= 4; i++) {
               hm["Number" + i] = data[0]["Number" + i];
               hm["Number_Info" + i] = data[0]["Number_Info" + i];
               hm["Number_Mnemonic" + i] = data[0]["Number_Mnemonic" + i];
            }
            console.log("hm=" + JSON.stringify(hm));
            this.saved_words = this.helpers.getSavedWords(hm);
            this.timeline.savedWords = "<b>Date:" + data[0].Year + "-" + data[0].Date + ", " + "<br/>Event:<br/>" + data[0].Event + "<br/>Saved words:<br/>" + this.saved_words + "</b>";
            if (data[0].Mnemonics && data[0].Mnemonics.trim() !== "") {
               this.timeline.mnemonics = data[0].Mnemonics;
            } else {
               this.timeline.mnemonics = null;
            }
            this.helpers.dismissProgress();
         } else {
            this.helpers.setProgress("Loading major words, please wait...", true).then(async () => {
               console.log("START UP getMajorWords CALLING:... this.timeline.isStartGetEvents = " + this.timeline.isStartGetEvents + ", this.timeline.isCurrentEventEdit = " + this.timeline.isCurrentEventEdit);
               if (this.timeline.isStartGetEvents !== false && this.timeline.isCurrentEventEdit !== false) {
                  var val = await this.storage.get('SHOW_TIMELINE_CONDENSED_COMBO');
                  if (val != null) {
                     this.timeline.condensedCombination = val;
                     console.log("SET FROM STORAGE, this.timeline.condensedCombination = " + this.timeline.condensedCombination);
                  } else {
                     this.timeline.condensedCombination = this.timeline.selectedCombos[0];
                  }
               }
               this.getMajorWords(this.year, data[0].Date, this.date_number_string).then(() => {
                  if (this.timeline.isStartGetEvents === false || this.timeline.isCurrentEventEdit === false) {
                     this.timeline.isStartGetEvents = false;
                     this.timeline.isCurrentEventEdit = true;
                     this.showSelectedWords();
                  } else {
                     this.timeline.isStartGetEvents = false;
                     this.timeline.isCurrentEventEdit = true;
                     this.storage.get('SHOW_TIMELINE_SAVED_SELECTED_INDEXES').then((selected_indexes) => {
                        var selectedIndexes = selected_indexes;
                        console.log("SAVED selectedIndexes = " + JSON.stringify(selectedIndexes));
                        for (var i = 0; i < selectedIndexes.length; i++) {
                           if (!isNaN(selectedIndexes[i]) && this.timeline.radio_groups[i]) {
                              this.timeline.radio_groups[i].selectedIndex = selectedIndexes[i];
                           }
                        }
                        this.storage.get('SHOW_TIMELINE_SAVED_OWN_WORDS').then((list_own_words) => {
                           this.list_own_words = list_own_words;
                           console.log("SAVED list_own_words = " + JSON.stringify(list_own_words));
                           this.storage.get('SHOW_TIMELINE_SAVED_OWN_WORD_INFOS').then((list_own_word_infos) => {
                              console.log("SAVED list_own_word_infos = " + JSON.stringify(list_own_word_infos));
                              this.storage.get('SHOW_TIMELINE_SAVED_MNEMONICS').then((mnemonics) => {
                                 this.timeline.mnemonics = mnemonics;
                                 this.list_own_word_infos = list_own_word_infos;
                                 this.showSelectedWords();
                              });
                           });
                        });
                     });
                  }
               });
            });
         }
      } else {
         console.log("NO NEXT/LAST!!!");
         if (isNext != null) {
            var action = isNext === false ? "LAST" : "NEXT";
            this.timeline.resultsTop = "<b>" + this.number + " OF " + this.total + " EVENTS. NO " + action + " EVENT.</b>";
         } else {
            this.total = 0;
            this.timeline.resultsTop = "<b>Showing 0 of " + this.total + " 0 events.";
         }
         this.helpers.dismissProgress();
      }
   }

   editEvent() {
      console.log("editEvent called.");
      if (this.is_event_edit === true) {
         this.is_event_edit = false;
         this.helpers.setProgress("Editting event, please wait...", false).then(() => {
            var whereUpdate:any = { "User_ID": this.timeline.getOld.User_ID, "Event": this.timeline.getOld.Event };
            if (this.timeline.isShared !== true) {
               var Data_Type_ID = (this.type_clause && this.type_clause === "PERSONAL") ? "1" : "2";
               whereUpdate["Data_Type_ID"] = Data_Type_ID;
            }
            //SyncQuery(IS_APP,User_ID_Old,DB_Type_ID,Table_name,Act_Type_ID,Cols,Vals,Wheres)
            var queries = [new SyncQuery(null, this.timeline.getOld.User_ID, DB_Type_ID.DB_MISC, this.table, Op_Type_ID.UPDATE, ["Event"], [this.timeline.event], whereUpdate, User_Action_Request.USER_ID_UPDATE)];
            //autoSync(queries, opTypeId, userIdOld, names, entryOld, entry, image)
            this.helpers.autoSync(queries, Op_Type_ID.UPDATE, this.timeline.getOld.User_ID, { "Date": this.year + "-" + this.date }, { "Event": this.timeline.getOld.Event }, { "Event": this.timeline.event }).then((res) => {
               this.helpers.dismissProgress();
               if (res.isSuccess === true) {
                  this.timeline.getOld.Event = this.timeline.event;
                  this.timeline.resultsBottom = "<b>Event: " + this.year + " " + this.date + ", updated." + res.results;
                  this.helpers.myAlert("SUCCESS", "<b>" + this.timeline.resultsBottom + "</b>", "", "OK");
               } else {
                  console.log("ERROR:" + res.results);
                  this.timeline.resultsBottom = "Sorry: Error editting event for " + this.year + " " + this.date + ". " + res.results;
                  this.helpers.myAlert("ERROR", "<b>" + this.timeline.resultsBottom + "</b>", "", "Dismiss");
               }
            });
         });
      } else {
         this.is_event_edit = true;
      }
   }
   saveMajorWords() {
      console.log("saveMajorWords called.");
      var isAllSelected = true;
      for (var i = 0; i < this.timeline.radio_groups.length; i++) {
         if (this.timeline.radio_groups[i].selectedIndex == null) {
            isAllSelected = false;
         }
      }
      if (isAllSelected === false) {
         this.helpers.myAlert("<b><u>Please select words.</u></b>", "", "", "Dismiss");
         return;
      }
      var myRB: any = {};
      var selectedIndex = 0;
      var cvUsers: any = {};
      var cvShared: any = {};
      cvUsers.User_ID = Helpers.User.ID;
      cvUsers.Date = this.date;
      cvUsers.Year = this.year;
      cvUsers.Event_Type_ID = "2";
      cvUsers.Event = this.timeline.event;
      var myNumber = "", myNumberInfo = "", myNumberMnemonic = "";
      for (var i = 0; i < 4; i++) {//NEED TO DO IT FOR ALL ENTRIES(THIS IS FOR CLEARING OUT OLD ENTRIES IF SELECTING WORDS AGAIN:)
         if (i < this.timeline.radio_groups.length) {
            myRB = {};
            selectedIndex = this.timeline.radio_groups[i].selectedIndex;
            myNumber = this.timeline.radio_groups[i].find_word;
            if (selectedIndex < this.timeline.radio_groups[i].radio_buttons.length) {
               myRB = this.timeline.radio_groups[i].radio_buttons[selectedIndex];
               myNumberMnemonic = myRB.Number_Mnemonic;
               myNumberInfo = myRB.Number_Info;
            } else if (selectedIndex === this.timeline.radio_groups[i].radio_buttons.length) {//FOR OWN WORDS:
               myNumberMnemonic = this.helpers.formatWord(this.list_own_words[i].split(""), this.timeline.radio_groups[i].find_word);
               myNumberInfo = this.list_own_word_infos[i];
            }
         } else {
            myNumber = "";
            myNumberMnemonic = "";
            myNumberInfo = "";
         }
         //cvUsers:---------------------------------------------
         cvUsers["Number" + (i + 1)] = myNumber;
         cvUsers["Number_Mnemonic" + (i + 1)] = myNumberMnemonic;
         cvUsers["Number_Info" + (i + 1)] = myNumberInfo;
         //CV2:---------------------------------------------
         cvShared["Number" + (i + 1)] = myNumber;
         cvShared["Number_Mnemonic" + (i + 1)] = myNumberMnemonic;
         cvShared["Number_Info" + (i + 1)] = myNumberInfo;
      }// END PREPARE SQL LOOP... 
      var mnemonics = "";
      if (this.timeline.isMnemonics === true && this.timeline.mnemonics && this.timeline.mnemonics.trim() !== "") {
         mnemonics = this.timeline.mnemonics;
         cvUsers["Mnemonics"] = mnemonics;
         cvShared["Mnemonics"] = mnemonics;
      }
      //this.saveToUserHistorical(cols, vals).then((userResults) => {
      var save_results = "";
      var isDoingProgress = false;
      if (this.timeline.isSaveToUserHistorical === true) {
         isDoingProgress = true;
      }
      this.helpers.setProgress("Updating saved words for event, please wait...", isDoingProgress).then(() => {
         var cols = Object.keys(cvShared);
         var vals = cols.map((col) => { return cvShared[col]; });
         //SyncQuery(IS_APP,User_ID_Old,DB_Type_ID,Table_name,Act_Type_ID,Cols,Vals,Wheres)
         var queries = [new SyncQuery(null, this.timeline.getOld.User_ID, DB_Type_ID.DB_MISC, this.table, Op_Type_ID.UPDATE, cols, vals, { "User_ID": this.timeline.getOld.User_ID, "Event": this.timeline.getOld.Event }, User_Action_Request.USER_ID_UPDATE)];
         var userResults = "";
         if (this.timeline.isSaveToUserHistorical === true) {
            userResults = " Inserted into " + Helpers.User.Username + "'s user events historical table.";
            cols = Object.keys(cvUsers);
            vals = cols.map((col) => { return cvUsers[col]; });
            //SyncQuery(IS_APP,User_ID_Old,DB_Type_ID,Table_name,Act_Type_ID,Cols,Vals,Wheres)
            queries.push(new SyncQuery(null, null, DB_Type_ID.DB_MISC, Helpers.TABLES_MISC.user_event, Op_Type_ID.INSERT, cols, [vals], { "Event": this.timeline.event }));
         }
         //autoSync(queries, opTypeId, userIdOld, names, entryOld, entry, image)
         this.helpers.autoSync(queries, Op_Type_ID.UPDATE, this.timeline.getOld.User_ID, { "Date": this.date, "Event": this.timeline.event }, null, cvShared).then((res) => {
            if (res.isSuccess === true) {
               save_results += "Updated saved words on " + this.display_date + ", " + this.year + "." + userResults;
               save_results += res.results;
               console.log("SETTING this.timeline.resultsBottom=" + this.timeline.resultsBottom);
               this.timeline.resultsBottom = "<b>" + save_results + "</b>.";
               var yearIndex = -1;
               if (this.timeline.isShared === true) {
                  this.timeline.selectedYear.IS_SAVED = "1";
               } else if (this.timeline.isShared === false && this.timeline.selectedUserType === "PERSONAL") {
                  this.timeline.selectedYearUserPersonal.IS_SAVED = "1";
               } else if (this.timeline.isShared === false && this.timeline.selectedUserType === "HISTORICAL") {
                  this.timeline.selectedYearUserHistorical.IS_SAVED = "1";
               }
               this.incrementCountCompletedEvents();
               this.helpers.dismissProgress();
               this.helpers.myAlert("<b><u>Success</u></b>", "", "<b>" + save_results + "</b>", "OK");
               return;
            } else {
               console.log("ERROR:" + res.results);
               save_results += "Sorry: Error saving to user historical events: " + res.results;
               this.timeline.resultsBottom = "<b>" + save_results + "</b>:<br />" + res.results;
               this.incrementCountCompletedEvents();
               this.helpers.dismissProgress();
            }
         });
      });
      //});
   }


   getMonthDays() {
      console.log("getMonthDays called.");
      this.year = new Date().getFullYear();
      console.log("Year = " + this.year);
      console.log("selectedMonth = " + this.timeline.selectedMonth);
      var month_index = this.timeline.months.indexOf(this.timeline.selectedMonth);
      var numberDaysMonth = new Date(this.year, (month_index + 1), 0).getDate();
      console.log("numberDaysMonth = " + numberDaysMonth);
      this.timeline.days = [];
      for (var i = 0; i < numberDaysMonth; i++) {
         this.timeline.days.push((i + 1));
      }
   }

   editWordsAgain() {
      console.log("editWordsAgain called");
      if (this.timeline.isCombineYearDateAgain === true) {
         this.timeline.isCombineYearDate = true;
      } else {
         this.timeline.isCombineYearDate = false;
      }
      this.timeline.isEditWordsAgain = true;
      this.helpers.setProgress("Selecting major words again..", false).then(() => {
         this.getMajorWords(this.year, this.date, this.date_number_string).then(() => {
            this.showSelectedWords();
         });
      });
   }

   //ALL PARAMETERS ARE STRINGS(year, date, date_number_string, saved_words):
   getMajorWords(year:any, date:any, date_number_string:string): Promise<void> {
      console.log("getMajorWords called, year=" + year + " date=" + date + ", date_number_string=" + date_number_string + ", this.timeline.isCombineYearDate=" + this.timeline.isCombineYearDate);
      return new Promise((resolve, reject) => {
         this.radio_groups = [];
         this.rb_number = 0;
         this.input_words = [];
         // LISTS TO SAVE DICTIONARY WORDS:
         // INPUTS TO SAVE SELECTIONS:
         this.input_saved_numbers = [];
         this.input_saved_words = [];
         this.input_saved_infos = [];
         this.timeline.radio_groups = [];
         var date_num = date_number_string;
         var num_wors_str = String(this.timeline.major_count);
         if (this.timeline.isEditShow == false) {
            num_wors_str = String(this.timeline.major_count_again);
            console.log("SET num_wors_str=this.timeline.major_count_again=" + this.timeline.major_count_again);
         }
         var num_wors = 0;
         var num_wors2 = 0;
         var num_wors3 = 0;
         var num_wors4 = 0;
         if (num_wors_str !== "ALL") {
            num_wors = parseInt(num_wors_str);
         }
         if (num_wors != 1 && num_wors_str !== "ALL") {
            num_wors2 = num_wors / 2;
            num_wors3 = num_wors / 3;
            num_wors4 = num_wors / 4;
         }
         if (num_wors == 1) {
            num_wors2 = 1;
            num_wors3 = 1;
            num_wors4 = 1;
         }
         if (num_wors_str === "ALL") {
            num_wors = 1000;
            num_wors2 = 500;
            num_wors3 = 333;
            num_wors4 = 250;
         }
         year = year.replace(" BC", "");
         var original_year = year;
         var seanumyea = original_year;
         seanumyea = String(seanumyea);
         seanumyea = seanumyea.replace(/^0+/, '');
         this.edit_date_number = seanumyea + date_num;
         console.log("getMajorWords, ADDING RADIO GROUPS!!!");
         // BEGIN IF NOT CONDENSED(DATE AND YEAR IS
         // SEPARATE...
         // ******************************************************************************************
         var found4 = false;
         if (this.timeline.isCombineYearDate === false) {
            // ADD RADIOGROUPS FOR YEAR OF EVENT:
            // ************************************************
            this.addRadioGroup("YEAR(" + seanumyea + "):", seanumyea, num_wors, "rgy_all", true, false).then((res) => {
               found4 = res;
               var yeabeg2 = original_year.substring(0, 2);
               var yealas2 = original_year.substring(2, 4);
               this.addRadioGroup("Year(" + yeabeg2 + "):", yeabeg2, num_wors2, "rgya", !found4, true).then((res) => {
                  this.addRadioGroup("Year(" + yealas2 + "):", yealas2, num_wors2, "rgyb", !found4, true).then((res) => {
                     // ADD RADIOGROUPS FOR DATE OF EVENT:
                     // ************************************************
                     this.addRadioGroup("DATE(" + date_num + "):", date_num, num_wors, "rg", true, false).then((res) => {
                        found4 = res;
                        if (found4 == false) {
                           console.log("DATE_NUM BEFORE PREPENDING ZEROES=" + date_num);
                           date_num = ("00" + date_num).slice(-4);
                           console.log("DATE_NUM AFTER PREPENDING ZEROES=" + date_num);
                           var seldatnumbeg2 = date_num.substring(0, 2);
                           this.addRadioGroup("DATE(" + seldatnumbeg2 + "):", seldatnumbeg2, num_wors2, "rga", true, true).then((res) => {
                              var seldatnumlas2 = date_num.substring(2, 4);
                              this.addRadioGroup("DATE(" + seldatnumlas2 + "):", seldatnumlas2, num_wors2, "rgb", true, true).then((res) => {
                                 this.cdr.detectChanges();
                                 this.helpers.dismissProgress();
                                 resolve();
                              });
                           });
                        } else {
                           this.cdr.detectChanges();
                           this.helpers.dismissProgress();
                           resolve();
                        }
                     });
                  });
               });
            });
         }// END IF NOT CONDENSED(DATE AND YEAR IS SEPERATE
         // BEGIN IF CONDENSED(DATE AND YEAR IS SEPERATE
         // ****************************************************************************
         var compnumb = seanumyea + date_num;
         //this.timeline.selectedCombos = this.timeline.combos[compnumb.length];
         if (this.timeline.isCombineYearDate === true) {
            console.log("getMajorWords COMBINING YEAR AND DATE!");
            var foundall = false;
            var foundyear = false;
            var founddate = false;
            var comnumlen = compnumb.length;
            var yearlen = seanumyea.length;
            var datelen = date_num.length;
            var begnum = "";
            var midnum = "";
            var endnum = "";
            console.log("getMajorWords compnumb = " + compnumb + ", comnumlen = " + comnumlen + ", yearlen = " + yearlen + ", datelen = " + datelen);

            console.log("this.timeline.selectedCombos = " + JSON.stringify(this.timeline.selectedCombos));
            if (this.timeline.isChooseCondensedCombos === true) {
               //addChosenCondensedCombos(index, completeWord, completeWordIndex, limit, callback) {
               if (!this.timeline.condensedCombination) { this.timeline.condensedCombination = this.timeline.selectedCombos[0]; }
               console.log("this.timeline.condensedCombination = " + JSON.stringify(this.timeline.condensedCombination));
               var combos = this.timeline.condensedCombination.split("-");
               var limit = 0;
               if (combos.length === 1) {
                  limit = num_wors;
               } else if (combos.length === 2) {
                  limit = num_wors2;
               } else if (combos.length === 3) {
                  limit = num_wors3;
               } else if (combos.length >= 4) {
                  limit = num_wors4;
               }
               this.addChosenCondensedCombos(0, compnumb, 0, limit, () => {
                  this.cdr.detectChanges();
                  this.helpers.dismissProgress();
                  resolve();
               });
            } else {
               this.addRadioGroup("COMPLETE DATE(" + compnumb + "):", compnumb, num_wors, "rgyall", true, false).then((res) => {
                  foundall = res;
                  if (foundall === true) {
                     this.cdr.detectChanges();
                     this.helpers.dismissProgress();
                     resolve();
                  }
                  else if (foundall === false) {
                     this.addRadioGroup("YEAR(" + seanumyea + "):", seanumyea, num_wors2, "rgyea", true, false).then((res) => {
                        foundyear = res;
                        this.addRadioGroup("DATE(" + date_num + "):", date_num, num_wors, "rgdat", foundyear, false).then(async (res) => {
                           founddate = res;
                           if (foundyear === true && founddate === true) {
                              this.cdr.detectChanges();
                              this.helpers.dismissProgress();                              
                              resolve();
                           } else {
                              var addRadGrpRes:any = null, radGrpNum:any = 0, radCombos:any = [], radCombosArr:any = [], startRadNumIndex:number = 0;
                              radCombos = this.timeline.combos[comnumlen].filter((cmb: any) => {
                                 radCombosArr = cmb.split("-");
                                 return radCombosArr.length > 1 && cmb !== (seanumyea + "-" + date_num);
                              });
                              for (var r = 0; r < radCombos.length; r++) {
                                 radCombosArr = radCombos[r].split("-");
                                 startRadNumIndex = 0;
                                 this.resetRadioGroups();
                                 addRadGrpRes = true;
                                 for (var n = 0; n < radCombosArr.length; n++) {
                                    radGrpNum = compnumb.substring(startRadNumIndex, (startRadNumIndex + radCombosArr[n]));
                                    addRadGrpRes = await this.addRadioGroup("COMBO(" + radGrpNum + "):", radGrpNum, num_wors4, "rg" + n, true, true);
                                    startRadNumIndex += radCombosArr[n];
                                    if (addRadGrpRes === false) {
                                       break;
                                    }
                                 }
                                 if(addRadGrpRes === true){
                                    break;
                                 }
                              }
                              this.cdr.detectChanges();
                              this.helpers.dismissProgress();                              
                              resolve();
                           }
                        });
                     });//END add year radio group
                  }// ENDS IF foundall is false
               });//END add complete date radio group
            }//ENDS IF NOT isChooseCondensedCombos
         }// ENDS IF check_condensed_words is checked
         //var display_savedwords = false;
         //var prompt_saved_words = "SAVED WORDS:";
         //var do_words_again = "Choose Words Again?";
         //var prompt_again_number = "  How Many?";
      });
   }

   resetRadioGroups() {
      if (this.timeline.radio_groups) {
         this.timeline.radio_groups = [];
         this.list_own_words = [];
         this.list_own_word_infos = [];
      }
   }

   addChosenCondensedCombos(index:number, completeWord:any, completeWordIndex:number, limit:any, callback:Function) {
      console.log("addChosenCondensedCombos called");
      var combos = this.timeline.condensedCombination.split("-");
      if (index < combos.length) {
         var find_word = completeWord.substring(completeWordIndex, (completeWordIndex + parseInt(combos[index])));
         completeWordIndex += parseInt(combos[index]);
         //addRadioGroup(prompt, find_word, limit, rg_name, isDo, isFinal)
         var rg_name = "rg" + Helpers.abcs[index];
         this.addRadioGroup("COMBO(" + find_word + "):", find_word, limit, rg_name, true, true).then((res) => {
            index++;
            this.addChosenCondensedCombos(index, completeWord, completeWordIndex, limit, callback);
         });
      } else {
         callback();
      }
   }

   returnSavedWordObject(): any {
      console.log("returnSavedWordObject called");
      var myRB: any = {};
      var selectedRbIndex = 0;
      var hm:any = {};
      this.timeline.canSaveMajorWords = true;
      for (var i = 0; i < this.timeline.radio_groups.length; i++) {
         selectedRbIndex = this.timeline.radio_groups[i].selectedIndex;
         myRB = this.timeline.radio_groups[i].radio_buttons[selectedRbIndex];
         hm["Number" + (i + 1)] = this.timeline.radio_groups[i].find_word;
         if (selectedRbIndex !== this.timeline.radio_groups[i].radio_buttons.length) {//NOT CHOOSE OWN WORDS:
            hm["Number_Info" + (i + 1)] = myRB.Number_Info;
            hm["Number_Mnemonic" + (i + 1)] = myRB.Number_Mnemonic;
         } else {//OWN WORDS:
            hm["Number_Info" + (i + 1)] = this.list_own_word_infos[i];
            hm["Number_Mnemonic" + (i + 1)] = this.helpers.formatWord(this.list_own_words[i].split(""), this.timeline.radio_groups[i].find_word);
         }
      }
      return hm;
   }


   showSelectedWords() {
      console.log("showSelectedWords called");
      var myRB: any = {};
      var selectedRbIndex = 0;
      var hm:any = {};
      var isAlertWrongOwnWords = false;
      var badOwnWord = "";
      var matchedOwnMajorWord = "";
      this.timeline.canSaveMajorWords = true;
      for (var i = 0; i < this.timeline.radio_groups.length; i++) {
         selectedRbIndex = this.timeline.radio_groups[i].selectedIndex;
         myRB = this.timeline.radio_groups[i].radio_buttons[selectedRbIndex];
         this.timeline.radio_groups[i].isInvalidOwnWord = false;
         hm["Number" + (i + 1)] = this.timeline.radio_groups[i].find_word;
         if (selectedRbIndex !== this.timeline.radio_groups[i].radio_buttons.length) {//NOT CHOOSE OWN WORDS:
            hm["Number_Info" + (i + 1)] = myRB.Number_Info;
            hm["Number_Mnemonic" + (i + 1)] = myRB.Number_Mnemonic;
         } else {//OWN WORDS:
            hm["Number_Info" + (i + 1)] = this.list_own_word_infos[i];
            hm["Number_Mnemonic" + (i + 1)] = this.helpers.formatWord(this.list_own_words[i].split(""), this.timeline.radio_groups[i].find_word);
            this.list_own_words[i] = this.helpers.formatWord(String(this.list_own_words[i]).split(""), this.timeline.radio_groups[i].find_word);
            if (this.helpers.getMajorSystemNumber(this.list_own_words[i], 0, this.timeline.radio_groups[i].find_word).length >= this.timeline.radio_groups[i].find_word.length) {
               if (this.helpers.getMajorSystemNumber(this.list_own_words[i], 0, this.timeline.radio_groups[i].find_word).substring(0, this.timeline.radio_groups[i].find_word.length) === this.timeline.radio_groups[i].find_word) {
                  this.timeline.canSaveMajorWords = true;
               } else {
                  this.timeline.canSaveMajorWords = false;
                  badOwnWord = this.list_own_words[i];
                  matchedOwnMajorWord = this.timeline.radio_groups[i].find_word;
                  this.timeline.radio_groups[i].isInvalidOwnWord = true;
                  isAlertWrongOwnWords = true;
               }
            } else {
               this.timeline.canSaveMajorWords = false;
            }
         }
      }
      this.timeline.resultsBottom = "<b>SAVE WORDS:<br />" + this.helpers.getSavedWords(hm) + "</b>";
      if (isAlertWrongOwnWords === true) {
         //this.helpers.myAlert("<b>Word: " + badOwnWord + " is bad.</b>", "Please enter a major word with first numbers equal to: " + matchedOwnMajorWord, "", "Dismiss");
      }
   }


   addRadioGroup(prompt:any, find_word:any, limit:any, rg_name:any, isDo:boolean, isFinal:boolean): Promise<any> {//RETURNS BOOLEAN
      //rg_name = RADIO GROUP NAME
      //find_word = part of the date number to search for a major word.
      return new Promise((resolve, reject) => {
         if (isDo === false) {
            resolve(false);
            return;
         } else {
            console.log("addRadioGroup called, prompt=" + prompt + ", find_word=" + find_word + ", limit=" + limit);
            this.helpers.getMajorWords(find_word, limit).then(majorWords => {
               if (majorWords === false) {
                  resolve(false);
               } else {
                  var flag = this.finishAddRadioGroup(prompt, find_word, rg_name, isFinal, majorWords);
                  resolve(flag);
               }
            });
         }
      });
   }

   finishAddRadioGroup(prompt:any, find_word:any, rg_name:any, isFinal:boolean, major_words:any) {
      console.log("finishAddRadioGroup called");
      var flag = false;
      var prompt_own_word = "";
      if (major_words.length > 0) {
         this.timeline.radio_groups.push({ "selectedIndex": 0, "checked_radio_button_index": -1, "find_word": find_word, "radio_buttons": [], "end": "", "name": rg_name, "title": prompt, "count": 0 });
         var rg_index = 0;
         if (this.timeline.radio_groups.length > 0) {
            var rg_index = this.timeline.radio_groups.length - 1;
         }
         flag = true;
         prompt = "<b>" + prompt + "</b>";
         prompt_own_word = "<b>Input Word: </b>";
         this.list_own_words.push("");//OWN WORDS.
         this.list_own_word_infos.push("");//OWN WORD INFOS.
         var wriwor = "";
         var radio_button: any = {};
         var myDef = "";
         for (var i = 0; i < major_words.length; i++) {
            wriwor = this.helpers.formatWord(major_words[i].Word.split(""), find_word);
            radio_button = {};
            radio_button.isMatchedLetters = true;
            radio_button.Number_Info = major_words[i].Definition;
            myDef = major_words[i].Definition != null ? " - " + major_words[i].Definition : "";
            radio_button.Number_Mnemonic = wriwor;
            radio_button.radioButtonLabel = find_word + " " + wriwor + myDef;
            if (major_words[i].Word.toLowerCase() !== wriwor.toLowerCase()) {
               radio_button.isMatchedLetters = false;
            }
            this.timeline.radio_groups[rg_index].radio_buttons.push(radio_button);
            this.timeline.radio_groups[rg_index].count += 1;
         }
         this.timeline.radio_groups[rg_index].complete_radio_buttons = this.timeline.radio_groups[rg_index].radio_buttons.slice();
         this.timeline.radio_groups[rg_index].count += 1;
         this.timeline.radio_groups[rg_index].end = "<b>Write Own Word?(" + prompt + ")</b>";
      } else if (isFinal) {
         console.log("NO WORDS FROM DICTIONARY. IS FINAL IS TRUE, PUSHING OWN WORDS...");
         this.list_own_words.push("");//OWN WORDS.
         this.list_own_word_infos.push("");//OWN WORD INFOS.
         this.timeline.radio_groups.push({ "selectedIndex": 0, "checked_radio_button_index": -1, "find_word": find_word, "radio_buttons": [], "end": "", "name": rg_name, "title": prompt, "filterText": null });
         rg_index = 0;
         if (this.timeline.radio_groups.length > 0) {
            rg_index = this.timeline.radio_groups.length - 1;
         }
         this.timeline.radio_groups[rg_index].end = "<b>Write Own Word?(" + prompt + ")</b>";
      }
      return flag;
   }

   filterRadioGroup(radioGroupIndex:number) {
      console.log("filterRadioGroup called.");
      if (this.timeline.radio_groups[radioGroupIndex].filterText == null) {
         console.log("filterRadioGroup filterText IS NULL!!");
         this.timeline.radio_groups[radioGroupIndex].radio_buttons = this.timeline.radio_groups[radioGroupIndex].complete_radio_buttons;
      } else {
         this.timeline.radio_groups[radioGroupIndex].radio_buttons = this.timeline.radio_groups[radioGroupIndex].complete_radio_buttons.filter((radio_button:any) => {
            return (radio_button.radioButtonLabel && typeof radio_button.radioButtonLabel === 'string' && radio_button.radioButtonLabel.toLowerCase().match(this.timeline.radio_groups[radioGroupIndex].filterText.toLowerCase()) != null);
         });
      }
   }

   getAllSavedEvents() {
      console.log("getAllSavedEvents called");
      this.helpers.setProgress("Getting all saved events...", false).then(() => {
         if (Helpers.isWorkOffline === false) {
            var params = {
               "is_ascend": this.timeline.isAscending,
               "username": Helpers.User.Username,
               "is_shared": this.timeline.isShared,
               "type": this.timeline.selectedUserType
            };
            this.helpers.makeHttpRequest("/lfq_app_php/timeline_get_all_saved_events.php", "GET", params).then((data:any) => {
               if (data["SUCCESS"] === true) {
                  this.finishGetAllSavedEvents(data["SAVED_EVENTS"]);
                  this.helpers.dismissProgress();
               } else {
                  this.helpers.dismissProgress();
                  this.helpers.alertLfqError(data["ERROR"]);
               }
            }, error => {
               this.helpers.dismissProgress();
               this.helpers.alertServerError(error.message);
            });
         } else {
            var sql_total = "(SELECT COUNT(ID) FROM " + this.table + " WHERE Number1<>''";
            var user_clause = "";
            if (this.timeline.isShared === false) {
               var Data_Type_ID = (this.type_clause && this.type_clause === "PERSONAL") ? "1" : "2";
               user_clause = " AND Username='" + Helpers.User.Username + "' AND Data_Type_ID='" + Data_Type_ID + "'";
               sql_total += user_clause;
            }
            sql_total += ")";
            var get_events_sql = "SELECT *," + sql_total + " AS TOTAL FROM " + this.table + " WHERE Number1<>''" + user_clause;
            var ascClause = this.timeline.isAscending === true ? "ASC" : "DESC";
            get_events_sql += " ORDER BY Year " + ascClause + ", Date " + ascClause;
            this.helpers.query(this.database_misc, get_events_sql, []).then((data) => {
               console.log("BACK FROM GET A:: SAVED EVENTS, NUM ROWS=" + data.rows.length);
               var saved_events = [];
               for (var i = 0; i < data.rows.length; i++) {
                  saved_events.push(data.rows.item(i));
               }
               this.finishGetAllSavedEvents(saved_events);
               this.helpers.dismissProgress();
            }).catch((error:any) => {//END SELECT QUERY
               console.log("sql:" + get_events_sql + ", ERROR:" + error.message);
               this.helpers.dismissProgress();
               if (this.timeline.isShared) {
                  this.timeline.savedWords = "Sorry, no shared saved words exist yet";
               } else if (this.timeline.isShared) {
                  this.timeline.savedWords = "Sorry, no shared saved words exist yet for user " + Helpers.User.Username;
               }
               this.timeline.resultsTop = "<b>SHOWING " + this.total + " TOTAL EVENTS.";
               this.helpers.dismissProgress();
            });
         }
      });
   }

   finishGetAllSavedEvents(events:any) {
      if (events.length > 0) {
         this.total = events.length;
         console.log("BACK FROM GET SAVED EVENTS, TOTAL=" + this.total);
         var hm:any = {};
         var saved_words_text = "";
         for (var i = 0; i < events.length; i++) {
            hm = {};
            for (var j = 1; j <= 4; j++) {
               hm["Number" + j] = events[i]["Number" + j];
               hm["Number_Info" + j] = events[i]["Number_Info" + j];
               hm["Number_Mnemonic" + j] = events[i]["Number_Mnemonic" + j];
            }
            this.saved_words = this.helpers.getSavedWords(hm);
            if (i !== 0) {
               saved_words_text += "<br />";
            }
            saved_words_text += "<b>DATE:" + events[i].Year + "-" + events[i].Date + ", " + this.date + "<br/>EVENT:<br/>" + events[i].Event + "<br/>SAVED WORDS:<br/>" + this.saved_words + "<br/></b>";
         }
         this.timeline.savedWords = saved_words_text;
      } else {//data.rows.length=0
         if (this.timeline.isShared) {
            this.timeline.savedWords = "Sorry, no shared saved words exist yet";
         } else if (this.timeline.isShared) {
            this.timeline.savedWords = "Sorry, no shared saved words exist yet for user " + Helpers.User.Username;
         }
      }
      this.timeline.resultsTop = "<b>SHOWING " + this.total + " TOTAL EVENTS.";
   }

   getEvents() {
      //GET YEARS, ALL SAVED FUNCTIONS SAME FOR SHARED AND USERS      
      this.timeline.isShowTimelineResults = true;
      this.which_events = "";
      if (this.timeline.isShared === true) {
         console.log("SETTING IS SHARED VALUES...");
         this.which_events = this.timeline.selectedActionShared;//DATE_EVENTS, YEAR_EVENTS, ALL_SAVED
         this.table = Helpers.TABLES_MISC.event_table;
         this.year = this.timeline.selectedYear.Year;
      } else if (this.timeline.isShared === false) {
         console.log("SETTING IS NOT SHARED VALUES...");
         this.which_events = this.timeline.selectedActionUsers;//YEAR_EVENTS, ALL_SAVED
         this.table = Helpers.TABLES_MISC.user_event;
         this.type_clause = this.timeline.selectedUserType;
         if (this.type_clause === "HISTORICAL") {
            console.log("getEvents, this.timeline.selectedYearUserHistorical = " + JSON.stringify(this.timeline.selectedYearUserHistorical));
            if (this.timeline.selectedYearUserHistorical) {
               this.year = this.timeline.selectedYearUserHistorical.Year;
            }
         }
         if (this.type_clause === "PERSONAL") {
            console.log("getEvents, this.timeline.selectedYearUserPersonal = " + JSON.stringify(this.timeline.selectedYearUserPersonal));
            this.year = this.timeline.selectedYearUserPersonal.Year;
         }
      }
      if (this.timeline.isEditShow === false) {
         this.timeline.resultsBottom = "";
         this.timeline.savedWords = "";
      }
      console.log("getEvents called, this.which_events=" + this.which_events + ", this.year=" + this.year + ", this.table=" + this.table);
      if (this.which_events === "ALL_SAVED") {
         this.getAllSavedEvents();
         return;
      }
      if (this.which_events === "DATE_EVENTS") {
         var month_number = this.timeline.months.indexOf(this.timeline.selectedMonth) + 1;
         var day_number = this.timeline.selectedDay;
         var month_string = String(month_number);
         var day_string = String(day_number);
         if (month_string.length < 2) {
            console.log("prepending 0 to month_string");
            month_string = "0" + month_string;
         }
         if (day_string.length < 2) {
            console.log("prepending 0 to day_string");
            day_string = "0" + day_string;
         }
         this.date = month_string + "-" + day_string;
         console.log("date=" + this.date);
      }
      else if (this.which_events === "YEAR_EVENTS") {
         if (this.timeline.selectedYear.length === 0) {
            this.helpers.myAlert("<b>MUST ENTER A YEAR</b>", "", "", "Dismiss");
            return;
         }
      }
      this.is_event_edit = false;
      this.getEvent(null);
   }//END getEvents.

   setTable() {
      if (this.timeline.isShared === true) {
         this.table = Helpers.TABLES_MISC.event_table;
         this.lfq_table = Helpers.db_prefix + "misc." + Helpers.TABLES_MISC.event_table;
      } else {
         this.table = Helpers.TABLES_MISC.user_event;
         this.lfq_table = Helpers.db_prefix + "misc." + this.table;
      }
   }

   goBackUp() {
      console.log("goBackUp called.");
      this.timeline.isShowTimelineResults = false;
      this.timeline.radio_groups = [];
      this.timeline.isCurrentEventEdit = false;
      this.timeline.isEditWordsAgain = false;
      this.storage.set('SHOW_TIMELINE_IS_CURRENT_EDIT_EVENTS', this.timeline.isCurrentEventEdit).then(() => {
         console.log("SET this.timeline.isCurrentEventEdit = FALSE");
      });
   }

   setInputOwnWordIndex(radio_group_index:number) {
      console.log("setInputOwnWordIndex called");
      this.inputOwnWordIndex = radio_group_index;
   }

   incrementCountCompletedEvents() {
      console.log("incrementCountCompletedEvents called");
      var indexDateCompleted = Helpers.getIndexByProperty(this.timeline.completed, "date", this.date);
      console.log("incrementCountCompletedEvents: FOUND indexDateCompleted=" + indexDateCompleted);
      if (indexDateCompleted !== "FALSE") {
         this.timeline.completed[indexDateCompleted].count_saved_date++;
         this.timeline.completed[0].date_formatted++;//THIS IS ACTUALLY TOTAL COMPLETED
      }
   }

   goToTopList() {
      console.log("goToTopList called");
      let topEditElement:any = document.getElementById('topEditElement');
      let y:any = topEditElement? topEditElement.offsetTop : 0;
      let offset = 105;
      this.timeline.selectedGoToCombo = -1;
      //this.content.scrollTo(0, y - offset);
   }

   goToCombo(radio_group_index:number) {
      console.log("goToCombo called");
      let comboID = "combo" + radio_group_index;
      this.timeline.selectedGoToCombo = radio_group_index;
      let comboIdEle:any = document.getElementById(comboID);
      let y:any = comboIdEle? comboIdEle.offsetTop:0;
      let offset = 105;
      //this.content.scrollTo(0, y - offset);
   }

   clickEditShow() {
      console.log("clickEditShow called");
      this.timeline.isEditShow = !this.timeline.isEditShow;
      this.filterUserYears();
   }

   filterUserYears() {
      console.log("filterUserYears this.timeline.isEditShow = " + this.timeline.isEditShow);
      var isSavedBinary = this.timeline.isEditShow === true ? "0" : "1";
      this.timeline.yearsUserPersonalFiltered = this.timeline.yearsUserPersonal.filter((yup: any) => {
         console.log("filterUserYears (yup.IS_SAVED) = " + (yup.IS_SAVED));
         return String(yup.IS_SAVED) === isSavedBinary;
      });
      this.timeline.yearsUserHistoricalFiltered = this.timeline.yearsUserHistorical.filter((yuh: any) => {
         return String(yuh.IS_SAVED) === isSavedBinary;
      });
   }
}

interface myObject {
   [key: string]: any;
}
